include ../../data/assets

mixin assetDropdown(assetName, assetObject)
  select.sub-dropdown(name=`attr_assetdropdown${assetName}`)
    - var defaultTranslation = 'asset-dropdown-default'
    option(data-i18n=defaultTranslation value='' disabled='' selected='')=locals.translations[defaultTranslation]
    each asset, key in assets[assetObject]
      option(data-i18n=`asset-title-${key}` value=key)=locals.translations[`asset-title-${key}`]

mixin ability(asset, number, key)
  .flex-container
    if asset.firstAbilityChecked && number == 1
      input.asset-ability(
        type='checkbox'
        name=`attr_assetcheckbox_${asset.abilityId}${number}`
        checked
      )
    else
      input.asset-ability(
        type='checkbox'
        name=`attr_assetcheckbox_${asset.abilityId}${number}`
      )
    - var translationAbility = `asset-${key}-ability-${number}`
    .asset-ability
      p(data-i18n=translationAbility)!=locals.translations[translationAbility]
      if asset.abilityWriteIn
        if asset.abilityWriteIn.number == number
          - var translationAbilityWriteIn = `asset-${key}-ability-${number}-write-in`
          .asset-ability-write-in(data-i18n=translationAbilityWriteIn)!=locals.translations[translationAbilityWriteIn]
          input.border-bottom.no-border(type='text' name=`attr_asset${asset.abilityWriteIn.name}` value='')
      if asset.list && number == asset.list.ability
        - var currentListItem = 1
        ul
          while currentListItem <= asset.list.number
            - var translationId = `asset-${key}-ability-${number}-list-${currentListItem++}`
            li(data-i18n=translationId)!=locals.translations[translationId]

mixin write-in-input(key)
  .asset-write-in.asset-name(
    data-i18n=`asset-write-in-${key}`
  )=locals.translations[`asset-write-in-${key}`]

mixin description(asset, type, key)
  if asset.description || asset.writeIn 
    .asset-description
      if key === 'blade-bound'
        +write-in-input(key)
        input.border-bottom.no-border(type='text' name='attr_assetpathnameinput' value='')
      else if key === 'banner-sworn'
        +write-in-input(key)
        input.border-bottom.no-border(type='text' name='attr_assetpathnameinput' value='')
      else if key === 'devotant'
        +write-in-input(`${key}-1`)
        input.border-bottom.no-border(type='text' name='attr_assetgodsnameinput' value='')
        +write-in-input(`${key}-2`)
        input.border-bottom.no-border(type='text' name='attr_assetstatinput' value='')
      else if key === 'empowered'
        +write-in-input(key)
        input.border-bottom.no-border(type='text' name='attr_assettitleinput' value='')
      else if key === 'wright'
        +write-in-input(key)
        input.border-bottom.no-border(type='text' name='attr_assetspecialityinput' value='')
      if asset.description
        - var translationDesc = `asset-description-${key}`
        .asset-description-text(data-i18n=translationDesc)!=locals.translations[translationDesc]

mixin track(number, name)
  .asset-track-wrapper
    - 
      var currentTrack = 0
      var transformedName = name.replace('-', '')
    while currentTrack <= number
      .asset-track-box
        if currentTrack == 0
          .asset-track-box-display=0
        else
          .asset-track-box-display=`+ ${currentTrack}`
        input(type='radio' name=`attr_assettrack_${transformedName}` value=`${currentTrack}`)
        - currentTrack++

mixin combatTalentBuilder
  input.asset-combat-talent.hide-element(type='checkbox' name='attr_assetcombat-talent')
  .combat-talent.showhide
    +assetDropdown('combattalent', 'combatTalents')
    
    each asset, key in assets.combatTalents
      input(class=`hide-element ${key}` type='checkbox' name=`attr_assetcombattalentdiv${key}`)
      div(class=`hide-element ${key}`)
        if asset.description
          .asset-description
            - var translationDesc = `asset-description-${key}`
            .asset-description-text(data-i18n=translationDesc)!=locals.translations[translationDesc]
        .flex-wrapper
          each number in [ 1, 2, 3 ]
            +ability(asset, number, key)
        if key === 'ironclad'
          .asset-track-wrapper.asset-track-wrapper-wordy
            each track in [ 1, 2 ]
              - var value = track - 1
              .asset-track-box
                .asset-track-box-display!=locals.translations[`asset-ironclad-track-${track}`]
                input(type='radio' name='attr_assettrack_ironclad' value=`${value}`)

mixin companionBuilder
  - var assetType = 'companion'
  input.asset-companion.hide-element(type='checkbox' name=`attr_asset${assetType}`)
  .companion.showhide
    +assetDropdown(assetType, 'companions')

    each asset, key in assets.companions
      input(class=`hide-element ${key}` type='checkbox' name=`attr_asset${assetType}div${key}`)
      div(class=`hide-element ${key}`)
        .asset-description
          - var translationDesc = `asset-description-${key}`
          .asset-write-in.asset-name(data-i18n='asset-companion-name')!=locals.translations['asset-companion-name']
          input.border-bottom.no-border(type='text' name='attr_assetname' value='')
          .asset-description-text(data-i18n=translationDesc)!=locals.translations[translationDesc]
        .flex-wrapper
          each ability in [ 1, 2, 3 ]
            +ability(asset, ability, key)
        .asset-track-wrapper
          - var healthValue = 0
          while healthValue <= asset.health
            - var value = healthValue++
            .asset-track-box
              if value == 0
                .asset-track-box-display=value
              else
                .asset-track-box-display=`+ ${value}`
              input(type='radio' name=`attr_assettrack_${key}` value=`${value}`)

mixin ritualBuilder
  - var assetType = 'ritual'
  input.asset-ritual.hide-element(type='checkbox' name=`attr_asset${assetType}`)
  .ritual.showhide
    +assetDropdown(assetType, 'rituals')

    each asset, key in assets.rituals
      input(class=`hide-element ${key}` type='checkbox' name=`attr_asset${assetType}div${key}`)
      div(class=`hide-element ${key}`)
        .flex-wrapper
          each ability in [ 1, 2, 3 ]
            +ability(asset, ability, key)
        if asset.track
          +track(asset.track, key)

mixin pathBuilder
  - var assetType = 'path'
  input.asset-path.hide-element(type='checkbox' name=`attr_asset${assetType}`)
  .path.showhide
    +assetDropdown(assetType, 'paths')

    each asset, key in assets.paths
      input(class=`hide-element ${key}` type='checkbox' name=`attr_asset${assetType}div${key}`)
      div(class=`hide-element ${key}`)
        +description(asset, assetType, key)
        .flex-wrapper
          each ability in [ 1, 2, 3 ]
            +ability(asset, ability, key)
        if asset.track
          +track(asset.track, key)
