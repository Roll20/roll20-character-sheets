@use 'sass:math';

.hubdata {
  $this: '.hubdata';
  display: grid;
  gap: 2px;
  background: $grid-background;
  grid-template-columns: repeat(4, 1fr);

  grid-template-areas:
    'frame-integrity frame-integrity frame-integrity frame-integrity'
    'integrity-events integrity-events integrity-events integrity-events'
    'condition fuel power-source output-power'
    'modules modules modules overheated';

  &__frame-integrity {
    grid-area: frame-integrity;

    &--header {
      display: flex;
      .death__label {
        &:first-of-type {
          margin-right: $m-md;
        }
      }
    }

    &--grid {
      display: grid;
      grid-template-columns: 1fr 10%;
      grid-template-areas: 'frame-grid defense-rating';
      border: 2px solid $accent-color;
    }

    input[name*='frame_integrity'] {
      $framevalues: 10, 20, 30, 40, 50, 60, 70, 80, 90;
      @each $val in $framevalues {
        &[value='#{$val}'] {
          & ~ .frame-integrity {
            $opacity: calc($val / 100);
            $solid: calc($val / 11) * 10 + '%';
            $distance: calc(calc($val + 10) / 11) * 10 + '%';

            background: rgba($frame-integrity-color, $opacity);
            background: linear-gradient(
              90deg,
              $frame-integrity-color 0,
              $frame-integrity-color #{$solid},
              rgba($frame-integrity-color, 0) #{$distance}
            );
          }
        }
      }
      &[value='100'] {
        & ~ .frame-integrity {
          background: $frame-integrity-color;
        }
      }
    }
  }
  &__integrity-events {
    grid-area: integrity-events;
    display: grid;
    grid-template-columns: repeat(11, 1fr) 10%;
    grid-template-areas: 'condition-zero condition-zero . . distaster-table distaster-table distaster-table . . . all-calm all-calm';
  }
  &__condition {
    grid-area: condition;
    display: grid;
    grid-template-columns: 1fr auto auto;
    grid-gap: $p-md;
  }
  &__fuel {
    grid-area: fuel;
    display: grid;
    grid-template-columns: 1fr auto auto;
    grid-gap: $p-md;
  }
  &__power-source {
    grid-area: power-source;
    position: relative;
    display: grid;
    grid-template-columns: 1fr auto;
    grid-gap: $p-md;
  }
  &__output-power {
    grid-area: output-power;
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;

    .divider--arrow-down {
      &::before {
        font-weight: $font-normal;
        font-size: $font-h1;
      }
    }
  }
  &__modules {
    grid-area: modules;
    display: grid;
  }

  input[name*='overheated'][value='1'] {
    + .overheated {
      // background: linear-gradient(0deg, rgba($red, 0.5) 0%, rgba($orange, 0) 100%);
      .overheated__warning {
        display: block;
      }
      .death__input--bordered {
        border-color: $red;
        color: $red;
      }
    }
  }
  &__overheated {
    grid-area: overheated;
    position: relative;
    display: flex;
    flex-direction: column;
  }

  .divider--arrow-right {
    position: absolute;
    top: 1rem;
    right: -1rem;
    z-index: 1000;
    &::before {
      font-weight: $font-normal;
      font-size: $font-h1;
    }
  }

  .divider--arrow-down {
    position: absolute;
    bottom: -2rem;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
    z-index: 1000;
  }
}

.frame-integrity {
  grid-area: frame-grid;
  display: grid;
  grid-template-columns: repeat(11, 1fr);
  &--block {
    border-left: 2px dotted $border-color;
    &:first-of-type {
      border-left: none;
    }
  }
  &__value {
    &::after {
      content: '%';
    }
  }

  &__frame {
    position: relative;
    height: 100%;
    &--input {
      position: absolute;
      height: 100%;
      width: 100%;
    }
    &--label {
      position: absolute;
      bottom: 0;
      width: 100%;

      background: $accent-color;
      color: $white;
      text-align: center;
      font-size: $font-h4;
    }
  }
}

.defense-rating {
  grid-area: defense-rating;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: $p-md;

  border-left: 2px solid $border-color;
}

.integrity-events {
  &__label {
    &--condition-zero {
      grid-area: condition-zero;
    }
    &--distaster-table {
      grid-area: distaster-table;
    }
    &--all-calm {
      grid-area: all-calm;
      border-left: 2px dotted $border-color;
      padding-left: $p-md;
    }
  }
}

.power-source {
  &__radio {
    display: flex;
    align-items: center;
    margin-bottom: $m-md;
  }
  &__input {
    border: 2px solid $border-color;
    margin: 0 $m-md;
    height: 1rem;
    width: 1rem;
    &:checked {
      background-color: $accent-color;
    }
  }
  &__label {
    text-transform: none;
  }
}

.output-power {
  &__input {
    font-size: $font-h2;
  }
}

.modules {
  &__header,
  &__footer {
    position: relative;
    display: grid;
    grid-template-columns: 5fr 1fr;
  }
  &__footer {
    align-items: center;
    gap: $m-lg;
    &--label {
      text-transform: none;
    }

    .hubdata__total_power_cost--number {
      margin: 2.5px 0;
      padding: 5px;
      padding-bottom: 2.5px;

      background-color: $input-background;
      width: 100%;

      border: 2px dotted $border-color;
      color: $input-color;

      font-size: 1rem;
      text-align: center;
    }
    .divider--arrow-right {
      top: -0.5rem;
      right: -1.5rem;
    }
  }
  &--block {
    display: grid;
    grid-template-columns: 5fr 1fr;
  }
  &__input {
    border-bottom: 2px dotted $border-color;
    border-left: 2px dotted $border-color;

    &:first-of-type {
      border-left-color: transparent;
    }
  }
}

.overheated {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-end;

  &__warning {
    display: none;

    font-size: 3rem;
    font-weight: $font-bold;
    color: rgba($blood, 0.5);

    text-shadow: $orange 0px 0 4px;
    -webkit-text-stroke-width: 0.5px;
    -webkit-text-stroke-color: $blood;
  }

  &__label {
    text-transform: none;
    margin-top: $m-lg;
  }
}
