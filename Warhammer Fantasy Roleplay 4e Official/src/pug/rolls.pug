-
    const makeRoll = (roll, target, advantage=false, difficulty=false) => {
        const roll_array = [];
        const full_target = [
            `@{${target}}`,
            `+@{difficulty_query}`,
            `+@{roll_query}`
        ].join("");
        const advantage_target = [
            `@{${target}}`,
            `+@{difficulty_query}`,
            `+@{roll_query}`,
            `+(@{advantage}*10)`
        ].join("");
        
        roll_array.push(`@{roll_whisper}`);
        roll_array.push(`&{template:wfrp}`);
        roll_array.push(`{{name=@{character_name}}}`);

        if (target) {            
            roll_array.push(`{{roll=[[1d100cs<@{roll_cs}cf>@{roll_cf}]]}}`);

            if (difficulty === "combat") roll_array.push(`{{difficulty=[[@{difficulty_query_combat}]]}}`);
            else roll_array.push(`{{difficulty=[[@{difficulty_query}]]}}`);

            roll_array.push(`{{bonus=[[@{roll_query}]]}}`);
            roll_array.push(`@{roll_slbonus}`);
        }
        if (target && !advantage) {
            roll_array.push(`{{target=[[${full_target}]]}}`);
        } else if (target && advantage) {
            roll_array.push(`{{target=[[${advantage_target}]]}}`);
            roll_array.push(`{{roll_advantage=[[(@{advantage}*10)]]}}`);
        }

        Object.entries(roll).forEach(([key,val]) => roll_array.push(`{{${key}=${val}}}`));
        
        return roll_array.join(" ");
    }

    const capitalizeString = (string) => {
        return string.split(" ").map(word => `${word.substring(0,1).toUpperCase()}${word.substring(1,word.length)}`).join(" ");
    }

    const rolls = {};

    rolls.characteristic = {};
    characteristics.forEach(characteristic => {
        const attr = characteristic.name.toLowerCase().replace(/ /g,"_");

        const roll_values = {
            roll_name: `${characteristic.name}`,
            roll_type: `Characteristic`,
        }

        rolls.characteristic[attr] = makeRoll(roll_values, attr);

    });

    rolls.skills = {};

    [...skills.advanced, ...skills.basic].forEach(skill => {
        const attr = skill.name.toLowerCase().replace(/ /g,"-");

        const roll_values = {
            roll_name: `${skill.name}`,
            roll_type: `Skill`,
            roll_notes: `@{${attr}_notes}`
        }

        rolls.skills[attr] = makeRoll(roll_values, attr);

    });

    [skills.basic[18], skills.advanced[2], skills.advanced[5], skills.advanced[11]].forEach(skill => {

        skill.specialisations.forEach(specialisation => {

            const attr = specialisation.toLowerCase().replace(/ /g,"_");

            const rollName = (specialisation === "Custom") ? "@{custom_name}" : specialisation;

            const roll_values = {
                roll_name: `${skill.name} - ${rollName}`,
                roll_type: `Specialisation`,
                roll_notes: `@{${attr}_notes}`
            }

            rolls.skills[attr] = makeRoll(roll_values, attr);
        });
        
    });
    
    {
        const attr = "specialisation";

        const roll_values = {
            roll_name: `@{specialisation_name}`,
            roll_type: `Skill Specialisation`,
            roll_notes: `@{specialisation_notes}`
        }
        rolls.repeating_skill = makeRoll(roll_values, attr);
    }
    
    {
        const attr = "npc_skill";

        const roll_values = {
            roll_name: `@{npc_skillname}`,
            roll_type: `Skill`
        }
        rolls.npc_repeating_skill = makeRoll(roll_values, attr);
    }

    rolls.repeating = {};

    ["talent", "condition", "psychology", "corruption"].forEach(section => {

        const roll_values = {
            roll_name: `@{${section}_name}`,
            roll_type: `${capitalizeString(section)}`,
            roll_text: `@{${section}_description}`
        }

        rolls.repeating[section] = makeRoll(roll_values)
    });

    {
        const attr = "weapon_target";

        const roll_values = {
            roll_name: "@{weapon_name}",
            roll_type: "@{weapon_group} Attack",
            roll_notes: "@{weapon_notes}",
            roll_qualities: "@{weapon_qualities}",
            roll_damage: "[[@{weapon_damage}]] + Opposed SL",
            roll_range: "@{weapon_range}",
            roll_text: "@{weapon_description}",
            roll_hit_location: "1",
            roll_crit_location: "[[1d100]]",
        }

        rolls.attack = makeRoll(roll_values, attr, true, "combat")
    }

    //- {
    //-     const roll_values = {
    //-         roll_name: `Critical Hit`,
    //-         roll_crit: `[[?{Crit Location|Head,1|Body,2|Left Arm,3|Right Arm,4|Left Leg,5|Right Leg,6|Random, 1d6}]]`
    //-     }

    //-     rolls.crit = makeRoll(roll_values)
    //- }

    //- {
    //-     const roll_values = {
    //-         roll_name: `Fumble`,
    //-         roll_fumble: 1
    //-     }

    //-     rolls.fumble = makeRoll(roll_values)
    //- }

    {
        const attr = "spell_total";

        const roll_values = {
            roll_name: `@{spell_name}`,
            roll_type: `@{spell_type}`,
            roll_target: `@{spell_target}`,
            roll_duration: `@{spell_duration}`,
            roll_range: `@{spell_range}`,
            roll_cn: `[[@{spell_cn}-?{Channeling|0}]]`,
            roll_text: `@{spell_description}`,
            roll_spell: 1,
        }

        rolls.spell = makeRoll(roll_values, attr, "combat")
    }

    {
        const attr = "attack_target";

        const roll_values = {
            roll_name: `@{attack_name}`,
            roll_type: `@{attack_type}`,
            roll_target: `@{attack_target}`,
            roll_range: `@{attack_range}`,
            roll_text: `@{attack_description}`,
            roll_damage: "[[@{attack_damage}]] + Opposed SL",
            roll_hit_location: "1",
            roll_crit_location: "[[1d100]]",
        }

        rolls.npcattack = makeRoll(roll_values, attr, true, "combat")
    }

    {

        const roll_values = {
            roll_name: `@{trait_name}`,
            roll_type: `Trait`,
            roll_text: `@{trait_description}`,
        }

        rolls.npctrait = makeRoll(roll_values)
    }

    {

        const roll_values = {
            roll_name: `@{talent_name}`,
            roll_type: `Talent`,
            roll_text: `@{talent_description}`,
        }

        rolls.npctalent = makeRoll(roll_values)
    }

    rolls.combat = {};

    ["Dodge","Endurance","Intuition","Perception","Cool"].forEach(button => {
        
        const attr = button.toLowerCase();

        const roll_values = {
            roll_name: button,
            roll_type: `Skill`,
            roll_notes: `@{${attr}_notes}`
        }

        rolls.combat[attr] = makeRoll(roll_values, attr, true, "combat")

    });

    rolls.npc_combat = {};

    ["Dodge","Endurance","Intuition","Perception","Cool"].forEach(button => {
        
        const attr = button.toLowerCase();

        const roll_values = {
            roll_name: button,
            roll_type: `Skill`,
            roll_notes: `@{${attr}_notes}`
        }

        rolls.combat[`npc_${attr}`] = makeRoll(roll_values, `npc_${attr}`, true, "combat");

    });