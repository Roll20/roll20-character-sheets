-
    const calcHitLocation = (min, max) => {
        const array = [];
        for (let i = min; i <= max; i++) {
            const string = (i >= 10) ? i.toString() : `0${i.toString()}`; 
            array.push(string.split("").reverse().join(""));
        }
        return array.sort();
    }

    const success_isnot_array = ["^rollGreater() roll target","^rollWasFumble() roll"];
    const fail_isnot_array = ["^rollLess() roll target","^rollWasCrit() roll", "^rollTotal() roll target"];
    const crit_array = [11,22,33,44,55,66,77,88,99];
    const crit_isnot_array = crit_array.map(crit => `^rollTotal() roll ${crit}`);
    const crit_is_array = crit_array.map(crit => `rollTotal() roll ${crit}`);

    const roll_fields = [
        {
            label: "Bonus",
            value: "bonus",
            type: "number",
        },
        {
            label: "Advantage",
            value: "roll_advantage",
            type: "number",
        },
        {
            label: "SL Bonus",
            value: "sl_bonus",
            type: "number",
        },
        {
            label: "CN",
            value: "roll_cn",
            type: "number",
        },
        {
            label: "Range",
            value: "roll_range",
        },
        {
            label: "Damage",
            value: "roll_damage",
        },
        {
            label: "Target",
            value: "roll_target",
        },
        {
            label: "Duration",
            value: "roll_duration",
        }
    ];

    const locations = [
        {
            name: "Head",
            targets: calcHitLocation(1,9)
        },
        {
            name: "Left Arm",
            targets: calcHitLocation(10,24)
        },
        {
            name: "Right Arm",
            targets: calcHitLocation(25,44)
        },
        {
            name: "Body",
            targets: calcHitLocation(44,79)
        },
        {
            name: "Left Leg",
            targets: calcHitLocation(80,89)
        },
        {
            name: "Right Leg",
            targets: calcHitLocation(90,100)
        },
    ];

mixin tags(array)
    each tag in array
        | {{##{tag}}}
    if block
        block
    each tag in array.reverse()
        | {{/#{tag}}}

mixin roll()
    +tags(success_isnot_array)
        each crit in crit_array
            +tags([`rollTotal() roll ${crit}`])
                .wfrp-roll__result.fullcrit {{roll}}
        +tags(crit_isnot_array)
            .wfrp-roll__result {{roll}}

    +tags(fail_isnot_array)
        each crit in crit_array
            +tags([`rollTotal() roll ${crit}`])
                .wfrp-roll__result.fullfail {{roll}}
        +tags(crit_isnot_array)
            .wfrp-roll__result {{roll}}

mixin success-fail()

    +tags(success_isnot_array)
        .wfrp-roll__success
        
            +tags(crit_isnot_array)
                each level in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]            
                    +tags([`rollBetween() target ${level} ${level+9}`])

                        each result in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                            - 
                                const out = ((Math.floor(level/10) - Math.floor(result/10)) < 2) ? "Marginal" :
                                            ((Math.floor(level/10) - Math.floor(result/10)) < 4) ? "" :
                                            ((Math.floor(level/10) - Math.floor(result/10)) < 6) ? "Impressive" :
                                            "Astounding";

                            +tags([`rollBetween() roll ${result} ${result+9}`])
                                span #{out}
                                
            each crit in crit_array
                +tags([`rollTotal() roll ${crit}`])
                    span(data-i18n="Critical")
                    
            span(data-i18n="Success")
        
            each level in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]            
                +tags([`rollBetween() target ${level} ${level+9}`])

                    each result in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                        - const out = `+${Math.floor(level/10) - Math.floor(result/10)}`;

                        +tags([`rollBetween() roll ${result} ${result+9}`])
                            span (#{out})

    +tags(fail_isnot_array)
        .wfrp-roll__fail
        
            +tags(crit_isnot_array)
                each level in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]            
                    +tags([`rollBetween() target ${level} ${level+9}`])

                        each result in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                            - 
                                const out = (Math.floor(result/10) - (Math.floor(level/10)) < 2) ? "Marginal" :
                                            (Math.floor(result/10) - (Math.floor(level/10)) < 4) ? "" :
                                            (Math.floor(result/10) - (Math.floor(level/10)) < 6) ? "Impressive" :
                                            "Astounding";

                            +tags([`rollBetween() roll ${result} ${result+9}`])
                                span #{out}

            each crit in crit_array
                +tags([`rollTotal() roll ${crit}`])
                    span(data-i18n="Critical")
            span(data-i18n="Failure")

            each level in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]
                +tags([`rollBetween() target ${level} ${level+9}`])

                    each result in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                        - const out = `${Math.floor(level/10) - Math.floor(result/10)}`;
                            +tags([`rollBetween() roll ${result} ${result+9}`])
                                span (#{out})

mixin success-level()

    +tags(success_isnot_array)
        
        each level in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]            
            +tags([`rollBetween() target ${level} ${level+9}`])

                each result in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                    - const out = (((level - result) / 10) <= 0) ? (level - result) / 10 : `+${(level - result) / 10}`;
                        +tags([`rollBetween() roll ${result} ${result+9}`])
                            .wfrp-roll__sl
                                .wfrp-roll__label(data-i18n="Success Level")
                                .wfrp-roll__value=out
    
    +tags(fail_isnot_array)
        
        each level in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]
            +tags([`rollBetween() target ${level} ${level+9}`])

                each result in [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
                    - const out = (((level - result) / 10) < 0) ? (level - result) / 10 : `+${(level - result) / 10}`;
                        +tags([`rollBetween() roll ${result} ${result+9}`])
                            .wfrp-roll__sl
                                .wfrp-roll__label(data-i18n="Success Level")
                                .wfrp-roll__value=out



mixin simple-row(label, value, array)
    +tags(array)
        .wfrp-roll__row
            .wfrp-roll__label(data-i18n=label)
            .wfrp-roll__value {{#{value}}}

mixin hit-location()

    +tags(crit_isnot_array)
        each location in locations
            each target in location.targets
                +tags([`rollTotal() roll ${target}`])
                    .wfrp-roll__value(data-i18n=location.name)


    each crit in crit_is_array
        +tags([crit])
            each location in locations
                each target in location.targets
                    +tags([`rollTotal() roll_crit_location ${target}`])
                        .wfrp-roll__value
                            span(data-i18n=location.name)
                            span &nbsp;({{roll_crit_location}})
        
mixin difficulty()
    +tags([`difficulty`])
        +tags([`rollTotal() difficulty -30`])
            span(data-i18n="Very Hard (-30)")

        +tags([`rollTotal() difficulty -20`])
            span(data-i18n="Hard (-20)")

        +tags([`rollTotal() difficulty -10`])
            span(data-i18n="Difficult (-10)")
            
        +tags([`rollTotal() difficulty 0`])
            span(data-i18n="Challenging (0)")

        +tags([`rollTotal() difficulty 20`])
            span(data-i18n="Average (+20)")

        +tags([`rollTotal() difficulty 40`])
            span(data-i18n="Easy (+40)")

        +tags([`rollTotal() difficulty 60`])
            span(data-i18n="Very Easy (+60)")


rolltemplate.sheet-rolltemplate-wfrp
    h3 {{name}}
    .wfrp-roll
        
        h1 {{roll_name}}
        h2 {{roll_type}} 
        +tags(["difficulty"])
            h2
                +difficulty()
        
        .wfrp-roll__divider
        
        +tags(["roll"])
            +roll()

        +tags(["init"])
            .wfrp-roll__result {{init}}
        
        +tags(["target"])
            .wfrp-roll__target
                .wfrp-roll__label(data-i18n="Target Number")
                .wfrp-roll__value {{target}}
        
        +success-fail()

        each field in roll_fields
            - const className = (field.type) ? `sheet-wfrp-roll__row--${field.type}` : ``;

            +tags([field.value])
                .wfrp-roll__row(class=className)
                    .wfrp-roll__label(data-i18n=field.label)
                    .wfrp-roll__value {{#{field.value}}}
                    
        +tags(["roll_hit_location"])
            .wfrp-roll__row
                .wfrp-roll__label(data-i18n="Hit Location")
                +hit-location

        +tags(["roll_notes"])
            .wfrp-roll__row--full
                .wfrp-roll__text {{roll_notes}}

        +tags(["roll_text"])
            .wfrp-roll__row--full
                .wfrp-roll__text {{roll_text}}