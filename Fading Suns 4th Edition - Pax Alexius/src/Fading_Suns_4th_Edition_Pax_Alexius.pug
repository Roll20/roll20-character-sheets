// CONSTANTS
-
    const characteristics = [
        { category: 'body',   list: [ 'strength', 'dexterity',  'endurance' ] },
        { category: 'mind',   list: [ 'wits',     'perception', 'will'      ] },
        { category: 'spirit', list: [ 'presence', 'intuition', 'faith'      ] }
    ];
-
    const skills = [
        { name: 'academia', default: 3 },
        { name: 'alchemy', default: 0 },
        { name: 'animalia', default: 3 },
        { name: 'arts', default: 3 },
        { name: 'charm', default: 3 },
        { name: 'crafts', default: 3 },
        { name: 'disguise', default: 3 },
        { name: 'drive', default: 3 },
        { name: 'empathy', default: 3 },
        { name: 'fight', default: 3 },
        { name: 'focus', default: 3 },
        { name: 'impress', default: 3 },
        { name: 'interface', default: 0 },

        { name: 'intrusion', default: 3 },
        { name: 'knavery', default: 3 },
        { name: 'melee', default: 3 },
        { name: 'observe', default: 3 },
        { name: 'perform', default: 3 },
        { name: 'pilot', default: 0 },
        { name: 'remedy', default: 3 },
        { name: 'shoot', default: 3 },
        { name: 'sleight_of_hand', default: 3 },
        { name: 'sneak', default: 3 },
        { name: 'survival', default: 3 },
        { name: 'tech_redemption', default: 3 },
        { name: 'vigor', default: 3 }
    ];
-
    const armor_proofing_types = [ 'blaster', 'flame', 'hard', 'laser', 'shock', 'slam', 'sonic' ];
-
    const states = [
        { category: 'physical_states', list: [ 'blinded',
                                               'dazed',
                                               'deafened',
                                               'desensitized',
                                               'disoriented',
                                               'dying',
                                               'euphoric',
                                               'fatigued',
                                               'hearing_impaired',
                                               'hindered',
                                               'immobilized',
                                               'incapacitated',
                                               'mangled',
                                               'nauseated',
                                               'paralized',
                                               'prone',
                                               'seeing_impaired',
                                               'stimulated',
                                               'stunned',
                                               'suspended',
                                               'tormented',
                                               'unconscious' ] },
        { category: 'mental_states', list : [ 'afraid',
                                              'angered',
                                              'anxious',
                                              'berserk',
                                              'commanded',
                                              'confused',
                                              'deceived',
                                              'enlightened',
                                              'penalized',
                                              'terrified',
                                              'wowed' ] },
        { category: 'social_states', list : [ 'awed',
                                              'befriended',
                                              'castigated',
                                              'convinced',
                                              'daunted',
                                              'divinely_inspired',
                                              'entreated',
                                              'guilty',
                                              'humiliated',
                                              'mesmerized',
                                             'roused' ] },
        { category: 'tech_compulsions', list : [ 'acquisitive',
                                                 'bloodthirsty',
                                                 'cruel',
                                                 'destructive',
                                                 'heedless',
                                                 'hypercritical',
                                                 'indiscreet',
                                                 'industrious',
                                                 'inerrant',
                                                 'pretentious',
                                                 'protective',
                                                 'reckless' ] }
    ];
// MIXINS

mixin label(i18n)
    label(data-i18n=i18n)&attributes(attributes)

mixin span(data)
    span(name=`attr_${attr_name}` title=`\${${attr_name}}`)&attributes(attributes)

mixin numeric_input(attr_name, default_value, min_value=false, title_i18n=false)
    input(name=`attr_${attr_name}` type='number' data-i18n-vars=`\${${attr_name}}|${default_value}` data-i18n-title=(title_i18n ? title_i18n : (default_value ? 'numeric_input_with_default_info' : false)) title=((title_i18n || default_value) ? false : `\${${attr_name}}` ) value=default_value min=min_value)&attributes(attributes)

mixin text_input(attr_name)
    input(name=`attr_${attr_name}` type='text' title=`\${${attr_name}}`)&attributes(attributes)

mixin text_input_notitle(attr_name)
    input(name=`attr_${attr_name}` type='text')&attributes(attributes)

mixin checkbox(attr_name, on=false)
    input(name=`attr_${attr_name}` type='checkbox' title=`\${${attr_name}}` value=(on? 'on' : false))&attributes(attributes)

mixin area_input(attr_name, i18n_placeholder)
    textarea(name=`attr_${attr_name}` data-i18n-placeholder=i18n_placeholder spellcheck='false')

mixin characteristic(name)
        button.fs-d20(type='roll' name=`roll_${name}` value=`&{template:fs-GoalRoll} {{characterName=@{character_name}}} {{characteristicName-i18n=^{${name}}}} {{bonus_penalty=[[?{@{goal_bonus_penalty_rollquery_i18n}}]]}} {{goal=[[@{${name}}+[[?{@{goal_bonus_penalty_rollquery_i18n}}]]]]}} {{roll=[[1d20cs[[{@{${name}}+[[?{@{goal_bonus_penalty_rollquery_i18n}}]],19}kl1]]cf20]]}}`)
        label.fs-characteristic-label
            span(data-i18n=`${name}`)
        +numeric_input(name, 3, 0)

mixin skill(name, value)
    .fs-skill(data-i18n-list-item=name)
        .fs-skill-normal
            button.fs-d20(type='roll' name='roll_disabledbutton' value='' disabled='')
            .fs-skill-roll-characteristic-choice
                label
                    span(data-i18n=`${name}`) #{name}
                    |  +
                each charac_cat in characteristics
                    each characteristicName in charac_cat.list
                        div
                            div
                                button.fs-d20(type='roll' name=`roll_${characteristicName}_${name}` value=`&{template:fs-GoalRoll} {{characterName=@{character_name}}} {{characteristicName-i18n=^{${characteristicName}}}} {{skillName-i18n=^{${name}}}} {{bonus_penalty=[[?{@{goal_bonus_penalty_rollquery_i18n}}]]}} {{goal=[[@{${characteristicName}}+@{${name}}+[[?{@{goal_bonus_penalty_rollquery_i18n}}]]]]}} {{roll=[[1d20cs[[{@{${characteristicName}}+@{${name}}+[[?{@{goal_bonus_penalty_rollquery_i18n}}]],19}kl1]]cf20]]}}`)
                                label(data-i18n=`${characteristicName}`) #{characteristicName}
            label.fs-skill-label
                span(data-i18n=`${name}`) #{name}
        +numeric_input(name, value, 0, (value==0 ? 'restricted_skill_info' : 'numeric_input_with_default_info'))

// CHARACTER SHEET LAYOUT - START

.fs-sheet

    input(type='hidden' name='attr_goal_bonus_penalty_rollquery_i18n' value='')
    input(type='hidden' name='attr_additional_goal_bonus_penalty_rollquery_i18n' value='')

    .fs-sheet-container
        input(type='hidden' name='attr_sheet_version' value='latest')

        .fs-baseinfo
            .fs-sheet-section
                .fs-name-grid
                    label.fs-uppercase-header(data-i18n='name')
                    +text_input('character_name')(class ='fs-name')
                    label.fs-planet(data-i18n='planet')
                    +text_input('planet')(class ='fs-planet')

            .fs-sheet-section
                .fs-rank-grid
                    label.fs-uppercase-header(data-i18n='rank')
                    +text_input('rank')(class ='fs-rank')
                    label.fs-birthdate(data-i18n='birthdate')
                    +text_input('birthdate')(class ='fs-birthdate')

            .fs-sheet-section
                .fs-species-grid
                    label.fs-uppercase-header(data-i18n='species')
                    +text_input('species')(class ='fs-species')
                    label.fs-size(data-i18n='size')
                    +numeric_input('size', false, 0)(class ='fs-size')
                    label.fs-speed(data-i18n='speed')
                    +text_input('speed')(class ='fs-speed')

        .fs-lifepath
            .fs-sheet-section
                .fs-class-grid
                    label.fs-uppercase-header(data-i18n='class')
                    +text_input('class_1')(class ='fs-class1')
                    +text_input('class_2')(class ='fs-class2')
                    label.fs-level(data-i18n='level') Level
                    +numeric_input('level', 1, 1)(class='fs-level')

            .fs-sheet-section
                .fs-faction-grid
                    label.fs-uppercase-header(data-i18n='faction')
                    +text_input('faction')(class ='fs-faction')
                    label.fs-blessing(data-i18n='blessing')
                    +text_input('blessing')(class ='fs-blessing')
                    label.fs-curse(data-i18n='curse')
                    +text_input('curse')(class ='fs-curse')

            .fs-sheet-section
                .fs-calling-grid
                    label.fs-uppercase-header(data-i18n='calling')
                    +text_input('calling_1')
                    +text_input('calling_2')
                    +text_input('calling_3')

        .fs-traits
            .fs-sheet-section
                .fs-skills-grid(data-i18n-list="skills_list")
                    label.fs-uppercase-header(data-i18n='skills')
                    each skill in skills
                        +skill(skill.name, skill.default)

            .fs-characteristics-grid
                each charac_cat in characteristics
                    .fs-sheet-section
                        .fs-characteristic-cat-grid
                            label.fs-uppercase-header(data-i18n=charac_cat.category)
                            each charac_name in charac_cat.list
                                +characteristic(charac_name)

        .fs-sheet-section
            .fs-occult-grid
                label.fs-uppercase-header(data-i18n='occult')
                div
                    +label('psi')(class='fs-occult-left')
                    +numeric_input('psi', false, 0)
                    +numeric_input('urge', false, 0)
                    +label('urge')(class='fs-occult-right')
                div
                    +label('theurgy')(class='fs-occult-left')
                    +numeric_input('theurgy', false, 0)
                    +numeric_input('hubris', false, 0)
                    +label('hubris')(class='fs-occult-right')
                div
                    +text_input('occult_3_name')(class='fs-occult-left')
                    +numeric_input('occult_3', false, 0)
                    +numeric_input('occult_3_opposite', false, 0)
                    +text_input('occult_3_opposite_name')(class='fs-occult-right')

        .fs-defenses
            .fs-sheet-section
                .fs-resistances-grid
                    label.fs-uppercase-header(data-i18n='resistances')
                    each charac_cat in characteristics
                        label(data-i18n=charac_cat.category)
                        +numeric_input(`${charac_cat.category}_resistance`, 0, 0)
                        +text_input(`${charac_cat.category}_resistance_modifier`)(data-i18n-placeholder='resistance_modifier')

            .fs-sheet-section
                .fs-armor-and-e-shield-grid
                    .fs-armor-and-e-shield-grid-row
                        label.fs-uppercase-header(data-i18n='armor')
                        +text_input('armor_name')
                        +numeric_input('armor_resistance', 0, 0)
                    .fs-armor-and-e-shield-grid-row.fs-armor-props
                        span
                        each armor_proofing_type in armor_proofing_types
                            +numeric_input(`armor_vs_${armor_proofing_type}`, 0, 0)(hidden=true)
                            label.fs-armor-proofing
                                +checkbox(`${armor_proofing_type}proof`)
                                div(data-i18n-vars=`\${${armor_proofing_type}proof}` data-i18n-title='armor_proofing_info')
                                    span(data-i18n=`${armor_proofing_type}_s`)
                                    span(name=`attr_armor_vs_${armor_proofing_type}`)
                    .fs-armor-and-e-shield-grid-row
                        label.fs-uppercase-header(data-i18n='e_shield')
                        +text_input('shield_name')
                    .fs-armor-and-e-shield-grid-row.fs-e-shield-props
                        label(data-i18n='e_shield_thresholds')
                        +numeric_input('shield_thresholds_min')
                        label /
                        +numeric_input('shield_thresholds_max')
                        label(data-i18n='e_shield_hits')
                        +numeric_input('shield_hits')
                        label /
                        +numeric_input('shield_hits_max')

            .fs-sheet-section
                .fs-vita-and-revivals-grid
                    label.fs-vitality-header.fs-uppercase-header(data-i18n='vitality')
                    label.fs-vitality-rating(data-i18n='rating')
                    +numeric_input('vitality_rating', 0, 0 /*once computed: , 'computed_info'*/)(class='fs-vitality-rating' /*once computed: readonly*/)
                    label.fs-vitality-current(data-i18n='current')
                    +numeric_input('vitality_current', 0, 0)(class='fs-vitality-current')
                    label.fs-revivals-header.fs-uppercase-header(data-i18n='revivals')
                    label.fs-revivals-rating(data-i18n='rating')
                    +numeric_input('revivals_rating', 0, 0 /*once computed: , 'computed_info'*/)(class='fs-revivals-rating' /*once computed: readonly*/)
                    span.fs-revivals-number
                        label(data-i18n='number')
                        +numeric_input('revivals_number', 1, 0)
                        label /
                    +numeric_input('revivals_number_max', 1, 1 /*once computed: , 'computed_info'*/)(class='fs-revivals-number' /*once computed: readonly*/)

        .fs-actions-vp-bank-and-surge
            .fs-sheet-section
                label.fs-uppercase-header(data-i18n='actions')
                
                .fs-actions
                    .fs-table
                        label.fs-table-head
                        label.fs-table-head(data-i18n='action')
                        label.fs-table-head(data-i18n='characteristic')
                        label.fs-table-head(data-i18n='skill')
                        label.fs-table-head(data-i18n='goal_bonus_penalty')
                    fieldset.repeating_actions
                        .fs-table
                            input(type='hidden' name='attr_action_characteristic_value')
                            input(type='hidden' name='attr_action_skill_value')
                            button.fs-20(type='roll' name='roll_action_roll' value='&{template:fs-GoalRoll} {{title=@{action_name}}} {{characterName=@{character_name}}} {{characteristicName-i18n=^{@{action_characteristic}}}} {{skillName-i18n=^{@{action_skill}}}} {{bonus_penalty=[[@{action_goal_bonus_penalty}+[[?{@{additional_goal_bonus_penalty_rollquery_i18n}}]]]]}} {{goal=[[@{action_characteristic_value}+@{action_skill_value}+@{action_goal_bonus_penalty}+[[?{@{additional_goal_bonus_penalty_rollquery_i18n}}]]]]}} {{roll=[[1d20cs[[{@{action_characteristic_value}+@{action_skill_value}+@{action_goal_bonus_penalty}+[[?{@{additional_goal_bonus_penalty_rollquery_i18n}}]],19}kl1]]cf20]]}}')
                            input.fs-table-cell(type='text' name='attr_action_name')
                            select.fs-table-cell(name='attr_action_characteristic')
                                option(value='' selected)
                                each charac_cat in characteristics
                                    optgroup(data-i18n-label=charac_cat.category)
                                    each charac_name in charac_cat.list
                                        option(value=charac_name data-i18n=charac_name)
                            select.fs-table-cell(name='attr_action_skill' data-i18n-list='skills_list')
                                option(value='' selected)
                                each sk in skills
                                    option(value=sk.name data-i18n=sk.name data-i18n-list-item=sk.name)
                            input.fs-table-cell(type='number' name='attr_action_goal_bonus_penalty' value=0)
                            .fs-notes.fs-textarea-reladiv
                                .fs-auto-expand-textarea
                                    span(name='attr_action_impact_notes')
                                    textarea(name='attr_action_impact_notes' data-i18n-placeholder='impact_notes' spellcheck='false')

            div
                .fs-states
                    .fs-sheet-section
                        label.fs-uppercase-header(data-i18n='states')
                        .fs-table
                            label.fs-table-head
                            label.fs-table-head(data-i18n='state')
                            label.fs-table-head(data-i18n='resistance_s')
                        fieldset.repeating_states
                            .fs-table
                                button.fs-20(type='roll' name='roll_shakeitoff_roll' value='[TODO] Shake-it-Off rolls not supported yet')
                                select.fs-table-cell(name='attr_state_name' data-i18n-list='states_list')
                                    option(value='' selected)
                                    each state_cat in states
                                        optgroup(data-i18n-label=state_cat.category)
                                        each state_name in state_cat.list
                                            option(value=state_name data-i18n=state_name data-i18n-list-item=state_name)
                                +numeric_input('state_resistance', false, false, 'state_resistance_info')(class='fs-table-cell')

                .fs-sheet-section-frame
                    .fs-vp-bank-and-surge-grid
                        label.fs-uppercase-header(data-i18n='vp_bank')(class='fs-vp-bank-header')
                        label(data-i18n='vp_bank_capacity')(class='fs-vp-bank-capacity')
                        +numeric_input('vp_bank_capacity', 0, 0 /*once computed: , 'computed_info'*/)(class='fs-vp-bank-capacity' /*once computed: readonly*/)
                        label(data-i18n='current_vp')(class='fs-current-vp')
                        +numeric_input('current_vp', 0, 0)(class='fs-current-vp')
                        label(data-i18n='current_wp')(class='fs-current-wp')
                        +numeric_input('current_wp', 0, 0)(class='fs-current-wp')
                        label.fs-uppercase-header(data-i18n='surge')(class='fs-surge-header')
                        label(data-i18n='surge_rating')(class='fs-surge-rating')
                        +numeric_input('surge_rating', 0, 0 /*once computed: , 'computed_info'*/)(class='fs-surge-rating' /*once computed: readonly*/)
                        span(class='fs-surge-number')
                            label(data-i18n='surge_number')
                            +numeric_input('surge_number', 1, 0)
                            label /
                        +numeric_input('surge_number_max', 1, 1 /*once computed: , 'computed_info'*/)(class='fs-surge-number' /*once computed: readonly*/)

        .fs-perks-capabilities-and-birthrights
            .fs-sheet-section
                label.fs-uppercase-header(data-i18n='perks')
                .fs-perks
                    fieldset.repeating_perks
                        .fs-table
                            input.fs-table-cell(type='text' name='attr_perk_name' data-i18n-placeholder='perk_name')
                            .fs-notes.fs-textarea-reladiv
                                .fs-auto-expand-textarea
                                    span(name='attr_perk_notes')
                                    textarea(name='attr_perk_notes' data-i18n-placeholder='perk_notes' spellcheck='false')
            div
                .fs-sheet-section
                    label.fs-uppercase-header(data-i18n='capabilities')
                    .fs-perks
                        fieldset.repeating_capabilities
                            .fs-table
                                input.fs-table-cell(type='text' name='attr_capability_name' data-i18n-placeholder='capability_name')
                                .fs-notes.fs-textarea-reladiv
                                    .fs-auto-expand-textarea
                                        span(name='attr_capability_notes')
                                        textarea(name='attr_capability_notes' data-i18n-placeholder='capability_notes' spellcheck='false')

                .fs-sheet-section
                    label.fs-uppercase-header(data-i18n='birthrights')
                    .fs-perks
                        fieldset.repeating_birthrights
                            .fs-table
                                input.fs-table-cell(type='text' name='attr_birthright_name' data-i18n-placeholder='birthright_name')
                                .fs-notes.fs-textarea-reladiv
                                    .fs-auto-expand-textarea
                                        span(name='attr_birthright_notes')
                                        textarea(name='attr_birthright_notes' data-i18n-placeholder='birthright_notes' spellcheck='false')

        .fs-possessions
            .fs-sheet-section

            .fs-possessions-header
                label.fs-uppercase-header(data-i18n='possessions')
                label(data-i18n='techgnosis')
                +numeric_input('techgnosis', 0, 0)

            .fs-carried-equipment
                each index in [1, 2]
                    div
                        .fs-table
                            label.fs-table-head(data-i18n='carried_equipment')
                            label.fs-table-head(data-i18n='tech_level_s')
                            label.fs-table-head(data-i18n='equipment_size')
                        fieldset(class=`repeating_carriedequipment${index}`)
                            .fs-table
                                input.fs-table-cell(type='text' name=`attr_carriedequipment${index}_name`)
                                input.fs-table-cell(type='number' name=`attr_carriedequipment${index}_tech_level`)
                                input.fs-table-cell(type='text' name=`attr_carriedequipment${index}_size`)
                                .fs-notes.fs-textarea-reladiv
                                    .fs-auto-expand-textarea
                                        span(name=`attr_carriedequipment${index}_notes`)
                                        textarea(name=`attr_carriedequipment${index}_notes` data-i18n-placeholder='notes' spellcheck='false')

            .fs-carried-weapons
                    div
                        .fs-table
                            label.fs-table-head(data-i18n='carried_weapons')
                            label.fs-table-head(data-i18n='tech_level_s')
                            label.fs-table-head(data-i18n='goal_bonus_penalty')
                            label.fs-table-head(data-i18n='damage_s')
                            label.fs-table-head(data-i18n='strength_s')
                            label.fs-table-head(data-i18n='range_s')
                            label.fs-table-head(data-i18n='rate_of_fire_s')
                            label.fs-table-head(data-i18n='ammunition_s')
                            label.fs-table-head(data-i18n='weapon_features')
                        fieldset(class='repeating_weapons')
                            .fs-table
                                input.fs-table-cell(type='text' name='attr_weapon_name')
                                input.fs-table-cell(type='number' name='attr_weapon_tl')
                                input.fs-table-cell(type='text' name='attr_weapon_goal')
                                input.fs-table-cell(type='text' name='attr_weapon_dmg')
                                input.fs-table-cell(type='number' name='attr_weapon_str')
                                input.fs-table-cell(type='text' name='attr_weapon_rng')
                                input.fs-table-cell(type='number' name='attr_weapon_rof')
                                input.fs-table-cell(type='number' name='attr_weapon_ammo')
                                input.fs-table-cell(type='text' name='attr_weapon_features')
                                .fs-notes.fs-textarea-reladiv
                                    .fs-auto-expand-textarea
                                        span(name=`attr_weapon_notes`)
                                        textarea(name=`attr_weapon_notes` data-i18n-placeholder='notes' spellcheck='false')

            .fs-owned
                each index in [1, 2]
                    div
                        .fs-table
                            label.fs-table-head(data-i18n='owned')
                            label.fs-table-head(data-i18n='location')
                        fieldset(class=`repeating_owned${index}`)
                            .fs-table
                                input.fs-table-cell(type='text' name=`attr_owned${index}_name`)
                                input.fs-table-cell(type='text' name=`attr_owned${index}_location`)
                                .fs-notes.fs-textarea-reladiv
                                    .fs-auto-expand-textarea
                                        span(name=`attr_owned${index}_notes`)
                                        textarea(name=`attr_owned${index}_notes` data-i18n-placeholder='notes' spellcheck='false')

        .fs-money
            .fs-sheet-section

            .fs-money-header
                label.fs-uppercase-header(data-i18n='money')
                +label('cash')
                +text_input('cash')

            .fs-assets
                each index in [1, 2]
                    div
                        .fs-table
                            label.fs-table-head(data-i18n='asset')
                            label.fs-table-head(data-i18n='income')
                        fieldset(class=`repeating_assets${index}`)
                            .fs-table
                                input.fs-table-cell(type='text' name=`attr_asset${index}_name`)
                                input.fs-table-cell(type='text' name=`attr_asset${index}_income`)
                                .fs-notes.fs-textarea-reladiv
                                    .fs-auto-expand-textarea
                                        span(name=`attr_asset${index}_notes`)
                                        textarea(name=`attr_asset${index}_notes` data-i18n-placeholder='notes' spellcheck='false')

        .fs-sheet-section
            label.fs-uppercase-header(data-i18n='last_notes')
            .fs-w100.fs-supertall-textarea.fs-textarea-reladiv
                .fs-auto-expand-textarea
                    span(name='attr_last_notes')
                    textarea(title='@{last_notes}' type='text' name='attr_last_notes' data-i18n-placeholder='notes' spellcheck='false')

        .fs-footer

// CHARACTER SHEET LAYOUT - END

// ROLL TEMPLATES - START
include roll-templates.html
// ROLL TEMPLATES - END

// SHEET WORKERS - START
script(type='text/worker')
 .
    const characteristic_names = !{JSON.stringify(characteristics)}.flatMap(x => x.list);
    const skill_names = !{JSON.stringify(skills)}.flatMap(x => x.name);
    const armor_proofing_types = !{JSON.stringify(armor_proofing_types)};
    const state_names = !{JSON.stringify(states)}.flatMap(x => x.list);

    const repeating_rolls = [
        { "section": "actions", "prefix": "action" }
    ];

    const repeating_sections = repeating_rolls.concat([
        { "section": "states", "prefix": "state" },
        { "section": "perks", "prefix": "perk" },
        { "section": "capabilities", "prefix": "capability" },
        { "section": "birthrights", "prefix": "birthright" },
        { "section": "carriedequipment1", "prefix": "carriedequipment1" },
        { "section": "carriedequipment2", "prefix": "carriedequipment2" },
        { "section": "weapons", "prefix": "weapon" },
        { "section": "owned1", "prefix": "owned1" },
        { "section": "owned2", "prefix": "owned2" },
        { "section": "assets1", "prefix": "asset1" },
        { "section": "assets2", "prefix": "asset2" },
    ]);

    const updateGoalNumber = (section, prefix) => {
        getSectionIDs(`repeating_${section}`, idArray => {
            const characteristicArray = idArray.map(id => `repeating_${section}_${id}_${prefix}_characteristic`);
            const characteristicValueArray = idArray.map(id => `repeating_${section}_${id}_${prefix}_characteristic_value`);
            const skillArray = idArray.map(id => `repeating_${section}_${id}_${prefix}_skill`);
            const skillValueArray = idArray.map(id => `repeating_${section}_${id}_${prefix}_skill_value`);
            getAttrs( [].concat(characteristicArray, skillArray), vNames => {
                getAttrs( vNames, vValues => {
                    let setAttrsObj = {};
                    for (let i = 0; i < idArray.length; ++i) {
                        setAttrsObj[characteristicValueArray[i]] = (parseInt(vValues[vNames[characteristicArray[i]]]) || 0);
                        setAttrsObj[skillValueArray[i]] = (parseInt(vValues[vNames[skillArray[i]]]) || 0);
                    }
                    setAttrs(setAttrsObj);
                });
            });
        });
    };

    [].concat(characteristic_names, skill_names).forEach( trait => {
        on(`change:${trait}`, eventInfo => {
            repeating_rolls.forEach( special_skill => {
                updateGoalNumber(special_skill.section, special_skill.prefix);
            });
        });
    });

    repeating_rolls.forEach( repeating => {
        on(`change:repeating_${repeating.section}`, eventInfo => {
            updateGoalNumber(repeating.section, repeating.prefix);
        });
    });

    repeating_sections.forEach( repeating => {
        on(`remove:repeating_${repeating.section}`, eventInfo => {
            const timestamp = Number(new Date())
            setAttrs({ repeat_delete: timestamp });
        });
    });

    armor_proofing_types.forEach( type => {
        on(`sheet:opened change:armor_resistance change:${type}proof`, eventInfo => {
            let checkbox = `${type}proof`;
            let value = `armor_vs_${type}`;
            getAttrs( [ 'armor_resistance', checkbox ], values => {
                let newValue = (values[checkbox]==='on' ? parseInt(values.armor_resistance) : Math.floor(parseInt(values.armor_resistance) / 2));
                setAttrs({
                   [value]: newValue
                });
            });
        });
    });

    //- Auto-computation disabled for now, as this needs to be improved to support partial advancements and potential modifiers (from perks or GM ruling)
    //-
    //- on("sheet:opened change:size change:endurance change:will change:faith change:level", eventInfo => {
    //-     getAttrs([ 'size', 'endurance', 'will', 'faith', 'level' ], values => {
    //-         setAttrs({ vitality_rating: parseInt(values.size) +
    //-                                     parseInt(values.endurance) +
    //-                                     parseInt(values.will) +
    //-                                     parseInt(values.faith) + 
    //-                                     parseInt(values.level) });
    //-     });
    //- });
    //-
    //- on("sheet:opened change:strength change:wits change:presence change:level", eventInfo => {
    //-     getAttrs([ 'strength', 'wits', 'presence', 'level' ], values => {
    //-         setAttrs({ surge_rating: Math.max(parseInt(values.strength), parseInt(values.wits), parseInt(values.presence)) + parseInt(values.level) });
    //-     });
    //- });
    //-
    //- on("sheet:opened change:size change:level", eventInfo => {
    //-     getAttrs([ 'size', 'level' ], values => {
    //-         setAttrs({ revivals_rating: parseInt(values.size) + parseInt(values.level) });
    //-     });
    //- });
    //-
    //- on("sheet:opened change:level", eventInfo => {
    //-     getAttrs([ 'level' ], values => {
    //-         let calc_bank_capa = (Math.floor(parseInt(values.level)/2) + 1) * 5;
    //-         let calc_surge_nb = Math.floor((parseInt(values.level)+2)/3);
    //-         let calc_revivals_nb = calc_surge_nb;
    //-         setAttrs({
    //-             vp_bank_capacity: calc_bank_capa,
    //-             surge_number_max: calc_surge_nb,
    //-             revivals_number_max: calc_revivals_nb
    //-         });
    //-     });
    //- });

    on("sheet:opened", function() {
        // sheet versioning
        getAttrs( [ 'sheet_version' ], values => {

            if (values.sheet_version !== "latest") {

                // insert version updates here

                // 1.0.0 to 1.1.0 => nothing to do

                // 1.1.0 to 1.2.0 => nothing to do

                // 1.2.0 to 1.2.1 => nothing to do
            }

            const latest_version = "1.2.1";
            
            if (values.sheet_version != latest_version) {
                setAttrs({ sheet_version: latest_version });
            }
        });

        // translate roll queries
        {
            let setAttrsObj = {};

            // Goal rolls
            let goal_bonus_penalty = getTranslationByKey('goal_bonus_penalty');
            setAttrsObj['goal_bonus_penalty_rollquery_i18n'] = `${goal_bonus_penalty}|0`;
            let additional_goal_bonus_penalty = getTranslationByKey('additional_goal_bonus_penalty');
            setAttrsObj['additional_goal_bonus_penalty_rollquery_i18n'] = `${additional_goal_bonus_penalty}|0`;

            setAttrs(setAttrsObj);
        }
    });

// FIN.
