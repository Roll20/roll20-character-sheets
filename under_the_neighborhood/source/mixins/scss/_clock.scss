@use '_mixinsandplaceholders';
$clockSizes:2,3,4,5,6,7,8,9,10;
$meterValues:(
  1:(2,3,4,5,6,7,8,9,10),
  2:(3,4,5,6,7,8,9,10),
  3:(4,5,6,7,8,9,10),
  4:(5,6,7,8,9,10),
  5:(6,7,8,9,10),
  6:(7,8,9,10),
  7:(8,9,10),
  8:(9,10),
  9:(10)
);
/// Mixin to place items on a circle
/// Adapted from on-circle by the original Authors to work with CSS variables based on a changing control attribute and to make pie slices instead of circular elements on the circle
/// @author Adapted by Scott Casey
/// @author Kitty Giraudel
/// @author Ana Tudor
@mixin on-circle($item-count) {
  > * {
    $angle: (360 / $item-count);

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        $rot:($angle * ($i - 1));
        transform: 
          rotate($rot * 1deg)
          translate(calc(var(--circleSize) / 4));
      }
    }
  }
}

#clock{
  --circleSize:150px;
  --itemDeg:0deg;
  --itemCount:10;
  .repcontainer{
    display:block;
    gap:var(--half-gap);
    column:{
      width:200px;
    }
  }
  .repitem{
    display:grid;
    gap:var(--half-gap);
    grid-template-areas: 
      'clock'
      'name'
    ;
    break-inside:avoid;
    > input{
      text-align:center;
    }
  }
  .clock-control--current[value="1"] ~ .clock-progress{
    --itemDeg:calc(1 / var(--itemCount) * 360deg);
  }
  @each $clockSize in $clockSizes{
    .clock-control--max[value="#{$clockSize}"] + .clock-progress{
      --itemCount:#{$clockSize};
    }
    .clock-control--current[value="#{$clockSize}"] ~ .clock-progress{
      --itemDeg:calc(#{$clockSize} / var(--itemCount) * 360deg);
    }
  }
  .clock-label{
    grid-area:clock;
    max-width:var(--circleSize);
    box-sizing:border-box;
    display:flex;
    place-self:center;
    align-items:center;
    z-index:10;
    > * {
      color:var(--selectedColor);
      font-weight:bold;
    }
  }
  .clock-progress{
    grid-area:clock;
    border-radius:50%;
    place-self:center;
    width:  var(--circleSize);
    height: var(--circleSize);
    display:grid;
    grid-template-areas:'content';
    background: conic-gradient(var(--selectedColor) var(--itemDeg),transparent var(--itemDeg));
    border:2px solid var(--selectedColor);
    &:before{
      content:'';
      box-sizing:border-box;
      width:75%;
      height:75%;
      place-self:center;
      border-radius:50%;
      background-color:var(--backColor);
      border:2px solid var(--selectedColor);
    }
  }
}