mixin npcAttribute(name)
  span(data-i18n=`${name.substring(0,3)}-u`) #{name.substring(0,3).toUpperCase()}
  input(type="text" name=`attr_${name}_base` value!="10")

mixin npcAttributeRoll(name)
  - var short = name.substring(0,3);
  - var value = `@{wtype}&{template:npc} @{npc_name_flag} {{rname=^{${name}}}} {{mod=[[[[@{${name}_mod}]][${short.toUpperCase()}]]]}} {{r1=[[@{d20}+[[@{${name}_mod}]][${short.toUpperCase()}]]]}} @{rtype}+[[@{${name}_mod}]][${short.toUpperCase()}]]]}} {{type=Ability}}`;
  .npc__attribute-container
    button.npc__attribute-button(type="roll" name=`roll_npc_${short}` value!=value)
      span.npc__attribute-title(data-i18n=`${short}-u`) #{short.toUpperCase()}
      span.npc__attribute-score(name=`attr_${name}`)
      span (
      span.npc__attribute-mod(name=`attr_${name}_mod`)
      span )

mixin npcSave(name)
  - var short = name.substring(0,3);
  span(data-i18n=`${short}-u`) #{short.toUpperCase()}
  input(type="text" name=`attr_npc_${short}_save_base` placeholder="0")
  input(type="hidden" name=`attr_npc_${short}_save` value!=`@{${name}_mod}`)

mixin npcSaveRoll(name)
  - const short = name.substring(0,3);
  - const capitalized = short.charAt(0).toUpperCase() + short.slice(1);
  - const value = `@{wtype}&{template:npc} @{npc_name_flag} {{rname=^{${name}-save}}} {{mod=[[[[@{npc_${short}_save}]][${short.toUpperCase()} SAVE]]]}} {{r1=[[@{d20}+[[@{npc_${short}_save}]][${short.toUpperCase()} SAVE]]]}} @{rtype}+[[@{npc_${short}_save}]][${short.toUpperCase()} SAVE]]]}} {{type=Save}}`
  input.npc__flag--mod(type="hidden" name=`attr_npc_${short}_save`)
  button.npc__save(type="roll" name=`roll_npc_${short}_save` value!=value)
    span(data-i18n=short) #{capitalized}
    span.stat(name=`attr_npc_${short}_save`)

mixin npcSkill(skill)
  - var name = skill.split(':')[0];
  - var sanitized = name.replace(/ /g,'_');
  - var modifier = skill.split(':')[1];
  .options__row.options__row--noborder(data-i18n-list-item=sanitized)
    span.options__flex(data-i18n=`${sanitized}-u`) #{name.toUpperCase()}
    input.options__flex--2(type="text" name=`attr_npc_${sanitized}_base` placeholder="0")
    input(type="hidden" name=`attr_npc_${sanitized}` value!=`@{${modifier}_mod}`)

mixin npcSkillRoll(skill)
  - var sanitized = skill.replace(/ /g,'_');
  - var capitalized = skill.charAt(0).toUpperCase() + skill.slice(1);
  - var value = `@{wtype}&{template:npc} @{npc_name_flag} {{rname=^{${sanitized}}}} {{mod=@{npc_${sanitized}}}} {{r1=[[@{d20}+@{npc_${sanitized}}]]}} @{rtype}+@{npc_${sanitized}}]]}} {{type=Skill}}`
  input.npc__flag--mod(type="hidden" name=`attr_npc_${sanitized}`)
  span(data-i18n-list-item=sanitized)
    button.npc__skill(type="roll" name=`roll_npc_${sanitized}` value!=value)
      span(data-i18n=sanitized) #{capitalized}
      span.stat(name=`attr_npc_${sanitized}`)

mixin toggleButton(attribute, cssClass="npc__toggle", showIcon=false, label="")
  input.toggle__input(name=`attr_${attribute}`, type="hidden", value="on")
  .toggle(class=`${cssClass}`)
    input(name=`attr_${attribute}`, type="checkbox", checked)
    span y

include layouts/panels/npc/Settings

.npc__grid

  .npc__column

    include layouts/panels/npc/Stats

    include layouts/panels/npc/Traits

    include layouts/panels/npc/BonusActions
  
  .npc__column--right

    include layouts/panels/npc/Actions

    include layouts/panels/npc/Reactions

    include layouts/panels/npc/LegendaryActions