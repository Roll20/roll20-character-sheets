- const templateHeader = name => `&{template:rolls} {{header=^{${name}}}}`
- const rollFormula = attrName => `{{dice=[[{1d20+({@{${attrName}}+(?{Roll Modifier|0})-20,0}kh1),1d0+20}kl1 [Roll]]]}} {{threshold=[[{@{${attrName}}+(?{Threshold Modifier|0}),20}kl1[Threshold]]]}} {{fumbleVal=[[20+({@{${attrName}}+(?{Roll Modifier|0}),0}kl1)]]}}`
- const damageFormula = attrName => `{{damage=[[(@{${attrName}}+(?{Damage Modifier|0}))]]}}`;
- const buttonName = name => name.replace(/ /g, '-');
- const attrName = name => name.replace(/ /g, '_');

mixin accentSubheader(name)
  h2.text-accent.small-caps.ellipse(data-i18n=name data-i18n-title=name)

mixin primarySubheader(name)
  h2.text-primary.small-caps.ellipse(data-i18n=name data-i18n-title=name)

mixin subHeader(name)
  h2.small-caps.ellipse(data-i18n=name data-i18n-title=name)

mixin boldSubheader(name)
  h3.bold.uppercase.ellipse(data-i18n=name data-i18n-title=name)

mixin textInput(name, i18n, accept)
  - i18n = i18n ? i18n : name
  label(data-i18n-title=`${i18n}`)
    input(data-i18n-placeholder=i18n name=`attr_${attrName(name)}` title=`@{${attrName(name)}}` type='text' value='' accept=accept)

mixin dropInput(val)
  - let { name, i18n, accept, type } = val
  - i18n = i18n ? i18n : name
  - accept = accept ? accept : attrName(name)
  if type === 'number'
    +numberInput(name, i18n, accept)
  else
    +textInput(name, i18n, accept)

mixin numberInput(name, i18n, accept)
  - i18n = i18n ? i18n : name
  label(data-i18n-title=`${i18n}`)
    input(name=`attr_${attrName(name)}` placeholder='#' title=`@{${attrName(name)}}` type='number' value='0', accept=accept)

mixin checkboxInput(name)
  label.styled-checkbox.grid(data-i18n-title=`${name}` title=`${name}`)
    input(name=`attr_${attrName(name)}` title=`@{${attrName(name)}}` type='checkbox' value=name)
    span.pictos 3

mixin attributeButton(name, i18n)
  - i18n = i18n ? i18n : name.slice(0, 3)
  button.uppercase(data-i18n=i18n name=`roll_${buttonName(name)}` type='roll' value!=`${templateHeader(name)} ${rollFormula(attrName(name))}`)

mixin rollButton(name)
  button.capitalize(data-i18n=name title=name name=`roll_${buttonName(name)}` type='roll' value!=`${templateHeader(name)} ${rollFormula(attrName(name))}`)

mixin squireButton(name)
  button.d20.capitalize(name=`roll_${buttonName(name)}` type='roll' value!=`${templateHeader("squire")}  ^{skill}}} ${rollFormula(attrName(`${name}`))}`) t

mixin damageButton(name, i18n)
  - i18n = i18n ? i18n : name
  button.capitalize(data-i18n=i18n name=`roll_${buttonName(name)}` type='roll' value!=`${templateHeader(name)} ${damageFormula(attrName(name))}`)

mixin brawlDamageRollButton(name, i18n)
  - i18n = i18n ? i18n : name
  button.d20.capitalize(name=`roll_${buttonName(name)}` type='roll' value!=`${templateHeader(i18n)} ${rollFormula("brawling")} {{damage=[[(@{${attrName(name)}}+(?{Modifier|0}))]]}}`) t

mixin criticalDamageButton
  button.d20.capitalize(name=`roll_critical_damage` type='roll' value!=`${templateHeader('critical damage')} {{damage=[[(@{critical_damage})]]}}`) t

mixin repeatingRollButton(name)
  button.d20.capitalize(name=`roll_${buttonName(name)}` type='roll' value!=`&{template:rolls} {{header=@{name}}} ${rollFormula(attrName(name))}`) t

mixin repeatingAttackRollButton(name)
  button.d20.capitalize(name=`roll_attack` type='roll' value!=`&{template:rolls} {{header=@{name}}} ${rollFormula("skill")} ${damageFormula("damage")}`) t

mixin tabButtons(value, className, selected)
  - const selectedKeyWord = selected ? 'selected' : ''
  label(class=`${className}` data-i18n-title=`sheet: ${value}`)
    input(name=`attr_sheet_type` title=`@{sheet_type}` type='radio' value=value ${selectedKeyWord})
    span.capitalize.text-center(data-i18n=`${value}`)

mixin table(rows)
  .table
    .grid.header.2column
      h3.small-caps.text-left(data-i18n='statistic')
      .flex-center
        h3.small-caps(data-i18n='value')
    .grid.body
      each val in rows
        - const inputs = ['armor points', 'current glory']
        .row.grid.2column
          h3.text-left(data-i18n=val)
          if inputs.includes(val)
            +textInput(val)
          else
            span.text-center(name=`attr_${attrName(val)}`)

mixin npcTable(rows)
  .table
    .header.2column
      h3.small-caps.text-left(data-i18n='statistic')
      .flex-center
        h3.small-caps(data-i18n='value')
    .body
      each val in rows
        .row.grid.2column
          h3.text-left(data-i18n=val)
          +dropInput({name: val})

mixin textArea(name)
  textarea(data-i18n-placeholder=name name=`attr_${attrName(name)}` placeholder=name)

mixin repeatingFlags(name)
  - const attr = name ? `flag_${attrName(name)}` : 'flag'
  input.flag(name=`attr_${attr}` title='Settings toggle' type='checkbox' value='true' checked)
  span.pictos p

mixin notesTextarea(name)
  -const attr = attrName(name)
    +repeatingFlags(name)
    span.display(name=`attr_${attr}`)
    +textArea(name)

mixin hoverSpan(name)
  -const attr = attrName(name)
  span.display(name=`attr_${attr}`)
  +numberInput(attr)