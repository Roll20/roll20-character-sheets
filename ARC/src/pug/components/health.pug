
mixin health
  article.healths
    +health-section("blood")
    +health-section("guts")
    +rests

mixin health-section(type)
  section.health
    .health__type
      +span({ data_i18n: type }).health__type--span
      +help(type)
    //- .health__plus
    //-   span +
    .health__mod
      +span({ data_i18n: "mod" }).health__mod--span
      +number({ name: `${type}_mod`, min: 0 }).health__mod--input
    //- .health__equals
    //-   span="=".health__equals
    .health__max
      +span({ data_i18n: "max" }).health__max--span
      +number({ name: `${type}_max`, min: 0 }).health__max--input
    .health__current
      +span({ data_i18n: "current" }).health__current--span
      +number({ name: type, min: 0 }).health__current--input

    - var title = (type == "blood" ? "physical_health" : "combat_health" )
    +popup({ name: type, title })
      +span({ data_i18n: `${type}_description` })

mixin rests
  section.rests
    -
      const roll__short_rest = [
        `&{template:recover}`,
        `{{character_name=@{character_name}}}`,
        `{{action=^{short_rest}}}`,
        `{{verb=^{takes_a_rest}}}`,
        `{{type=short-rest}}`,
        `{{blood=[[1d6]]}}`,
        `{{guts=[[1d6]]}}`
      ].join("");
    -
      const roll__long_rest = [
        `&{template:recover}`,
        `{{character_name=@{character_name}}}`,
        `{{action=^{long_rest}}}`,
        `{{type=long-rest}}`,
        `{{verb=^{takes_a_rest}}}`,
        `{{blood=[[2d6+@{blood_mod}[BLOOD]]]}}`,
        `{{guts=[[2d6+@{guts_mod}[GUTS]]]}}`
      ].join("");

    .rests__spacer
      hr.rests__spacer--line
    .rests__short
      +roll({ name: "short_rest", value: roll__short_rest }).rests__short--button
        +span({ data_i18n: "short_rest" }).rests__short--span
    .rests__spacer
      hr.rests__spacer--line
    .rests__long
      +roll({ name: "long_rest", value: roll__long_rest }).rests__long--button
        +span({ data_i18n: "long_rest" }).rests__long--span
    .rests__spacer
      hr.rests__spacer--line
