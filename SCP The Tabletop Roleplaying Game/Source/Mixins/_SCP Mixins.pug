- const dice =[8,10,12];
- 
	const abilities = ['strength','health','perception','dexterity','fate','charisma','intelligence','willpower'];
- 
	const derivativeStats = {
		skills:[{name:'assault rifle',ability:'dexterity'},{name:'handgun',ability:'dexterity'},{name:'heavy artillery',ability:'dexterity'},{name:'hunting/sniper rifle',ability:'dexterity'},{name:'melee',ability:'dexterity'},{name:'shotgun',ability:'dexterity'},{name:'submachine gun',ability:'dexterity',subsectionend:true},{name:'acting/lie',ability:'charisma'},{name:'art/music',ability:'intelligence'},{name:'break free/escape',ability:'strength'},{name:'catch/throw',ability:'dexterity'},{name:'climb',ability:'dexterity'},{name:'disguise/blend in',ability:'charisma'},{name:'drive',ability:'dexterity'},{name:'lock-picking',ability:'dexterity'},{name:'pickpocket',ability:'charisma'},{name:'pilot',ability:'intelligence'},{name:'stealth/hide',ability:'dexterity'},{name:'showmanship',ability:'charisma'},{name:'swim',ability:'dexterity'},{name:'teaching',ability:'intelligence'},{name:'wrestle/disarm',ability:'dexterity'},{name:'writing',ability:'intelligence'}],
		knowledges:[{name:'anatomy/first aid',ability:'intelligence'},{name:'ancient languages',ability:'intelligence'},{name:'architecture',ability:'intelligence'},{name:'astronomy',ability:'intelligence'},{name:'caretaking/nurture',ability:'charisma'},{name:'computer/hacking',ability:'intelligence'},{name:'cooking',ability:'intelligence'},{name:'demolitions',ability:'intelligence'},{name:'fashion/etiquette',ability:'charisma'},{name:'gambling/gaming',ability:'fate'},{name:'general knowledge',ability:'intelligence'},{name:'history/lore',ability:'intelligence'},{name:'identify taste/smell',ability:'perception'},{name:'investigate',ability:'intelligence'},{name:'law/politics',ability:'intelligence'},{name:'mathematics',ability:'intelligence'},{name:'mechanics',ability:'intelligence'},{name:'navigate',ability:'intelligence'},{name:'occult/scp lore',ability:'intelligence'},{name:'psychology',ability:'charisma'},{name:'religion',ability:'intelligence'},{name:'research/internet',ability:'intelligence'},{name:'science/physics',ability:'intelligence'},{name:'survival/tracking',ability:'perception'},{name:'technology',ability:'intelligence'},{name:'visual signals/sign lang.',ability:'intelligence'}],
		abilities:[{name:'awareness/reaction',ability:'perception',nomod:true},{name:'dodge/block',ability:'dexterity',nomod:true,subsectionend:true},{name:'animal ken/tame',ability:'charisma'},{name:'athletics',ability:'dexterity'},{name:'empathy',ability:'charisma'},{name:'endurance',ability:'health'},{name:'initiative',ability:'intelligence'},{name:'intimidate/taunt',ability:'charisma'},{name:'intuition',ability:'intelligence'},{name:'jump',ability:'dexterity'},{name:'leadership',ability:'charisma'},{name:'lift/push',ability:'strength'},{name:'negotiation/persuade',ability:'charisma'},{name:'resist ko/death',ability:'fate'},{name:'resist distress',ability:'willpower'},{name:'self-control',ability:'willpower'}]
	};
- const abilityScoreAbbrv = {strength:'str',health:'hth',perception:'per',dexterity:'dex',fate:'fte',charisma:'chr',intelligence:'int',willpower:'wil'};
- const reverence = [1,2,3,4,5,6,7];
- const personnelClass = ['a','b','c','d','e'];
- const appearances = ['beautiful','attractive','average','strange','creepy'];
- const bodyTypes = ['short','thin','average','heavyset','beast'];
- const reasonings = ['naive','skeptical','scientific','open-minded','nuts'];
- const attackSkills = ['melee','assault rifle','handgun','heavy artillery','hunting/sniper rifle','shotgun','submachine gun'];
- 
	const diePool = function(die){
		let pool;
		if(die===8){
			pool = 12;
		}else if(die=== 10){
			pool = 6;
		}else{
			pool = 3;
		}
	};
- 
	const attackColumns = {
		weapon:'text',
		skill:'select',
		recoil:'number',
		'to-hit modifiers':{
			melee:'number',
			hip:'number',
			ready:'number',
			aim:'number'
		},
		clip:'number',
		damage:{
			base:'text',
			x:'text'
		},
		element:'text',
		range:'text',
		special:'text'
	};
-
	const defaultDieNum = {
		'8':20,
		'10':4,
		'12':0
	};
- let dieValues = [...Array(20).keys()].map(n=>n+1).reverse();
- 
	let diceFields = [8,10,12].reduce((m,num)=>{
		let arr = [...Array(4).keys()].map(v=>v+1);
		if(num > 8){
			arr = [...Array(8).keys()].map(v=>v+1);
		}
		if(num > 10){
			arr = [...Array(7).keys()].map(v=>v+1);
		}
		arr.forEach((i)=>{
			m.push(`d${num}_${i}`);
			m.push(`d${num}Crit_${i}`);
		});
		return m;
	},[]);
- diceFields = [...diceFields,'exertion_1','exertion_2','exertion_3','exertion_4','exertion_5','exertion_6','exertion_7'];
mixin attackInput(name,type)
		- let obj;
		if type === 'select'
			- obj= {name,class:`${name} underlined`,title:repeatAttrTitle('attack',name)};
			+select(obj)
				each opt,i in attackSkills
					- format;
					- let optObj = {value:`@{${replaceSpaces(opt)}}`,'data-i18n':opt.toLowerCase()};
					if i === 0
						- optObj.selected='';
					+option(optObj)
		else
			- obj = {name,type:'text',value:type==='number'?0:'',class:`${name.replace(/([^\s]+)\s+.+/,'$1')} underlined${type==='number' ? ' number' : ''}`,title:repeatAttrTitle('attack',name)};
			if name === 'recoil'
				-format;
				-obj.name='recoil base';
				+input(obj)
				-obj.name='recoil';
				-obj.readonly='';
				+input(obj)
			else
				+input(obj)

//- End Mixin
//- Creates a fillable tracker.
//- name: name of the radio buttons
//- values: what values to assign to the radio buttons
//- label content: an array of content to display in the labels
//-
	mixin fillTracker(name,values,labelContent,readonly)
		.fillTrack
			+input({name,type:'hidden',value:0})
			each value in values.reverse()
				-format;
				+input({name:name,type:'radio',id:`${replaceSpaces(name)}-${value}`,class:`fill-${value} hidden`,value})
				- let labelObj = {'data-i18n-title':`${value} ${name}`,class:`fill-${value} fill-label`};
				if labelContent && labelContent[value - 1]
					- labelObj['data-i18n'] = labelContent[value - 1];
				if readonly
					-format;
					- labelObj.class=`${labelObj.class} separated-span`;
					+span(labelObj)
				else
					-format;
					- labelObj.for=`${replaceSpaces(name)}-${value}`;
					- labelObj.class=`${labelObj.class} separated-label`;
					+label(labelObj)
		- values.reverse();
mixin fillTracker(name,values,readonly)
	.fillTrack
		+input({name,type:'hidden',value:0})
		- const fillValues = [...values];
		- let clearClass = '';
		if fillValues.indexOf(0) < 0 && !readonly
			- fillValues.unshift(0);
			- clearClass = ' clearer';
		each value in fillValues
			-format;
			- let labelObj = {class:`fill-${value} fill-label`,'data-i18n-title':`${value} ${name}`};
			if readonly
				-format;
				- labelObj.class=`${labelObj.class} separated-span`;
				+input({name:name,type:'radio',class:`fill-${value} hidden`,value})
				+span(labelObj)
			else
				- labelObj.class=`${labelObj.class} separated-label`;
				if value === 0
					- labelObj.class=`${labelObj.class}${clearClass}`;
					- labelObj.checked = '';
				+input({name:name,type:'radio',value,...labelObj})
//- End Mixin
mixin dieField(value)
	- let dice = [20,12,'exertion',10,8].filter(n=>n>=value||(n==='exertion' && value<=12));
	- 
		let fieldNums = {
			'20':{crits:[...Array(15).keys()].map(n=>`d12Crit_${n+1}`),regular:[]},
			'12':{crits:[...Array(8).keys()].map(n=>`d10Crit_${n+1}`),regular:[...Array(4).keys()].map(n=>`d12_${n+1}`)},
			'10':{crits:[...Array(4).keys()].map(n=>`d8Crit_${n+1}`),regular:[...Array(4).keys()].map(n=>`d10_${n+1}`)},
			'8':{crits:[],regular:[...Array(4).keys()].map(n=>`d8_${n+1}`)},
			exertion:{crits:[],regular:[...Array(7).keys()].map(n=>`exertion_${n+1}`)}
		};
	each die in dice
		-format;
		- let dieArray = [...fieldNums[`${die}`].crits,...fieldNums[`${die}`].regular];
		each field in dieArray
			-format;
			+dieLogic(die,field,value)
//- End Mixin
mixin dieLogic(die,field,value,addClass)
	-let helpObj = {func:'rollBetween',values:`${field} ${value} ${value}`};
	+templateHelperFunction(helpObj)
		- let classText = die === 'exertion' ? 'd12' : `d${die}`;
		span(class=`${classText} val-${value}${addClass ? ` ${addClass}`:''}`)
			if !addClass
				!=`{{${field}}}`
			-format;
			span(class='die-icon' data-i18n-title=`${value} on a d${die}`)
//- End Mixin
mixin roll-label(obj)
	-obj.class = obj.class ? `${obj.class} roll-label` : 'roll-label';
	+label(obj)
		.dice-icon
			each die in dice
				-format;
				+span({class:`d${die}-font`})
		block
//- End Mixin