//- This file will store all mixins and placeholders that have generic use

//- Color palette variables
%color-palette {
  --white:         rgb(245, 245, 245);
  --off-white:     rgb(236, 232, 227);
  --grey-lt:       rgb(201, 201, 201);
  --grey:          rgb(145, 145, 145);
  --off-grey:      rgb(136, 153, 155);
  --grey-dk:       rgb(102, 102, 102);
  --off-black:     rgb(31, 27, 25);
  --black:         rgb(20, 20, 20);
  --half-white:    rgba(245, 245, 245, 0.5);
  --half-black:    rgba(20, 20, 20, 0.5);
  --half-grey:     rgba(145, 145, 145, 0.5);
  --purple:        rgb(156, 70, 255);
  --magenta-lt:    rgb(242, 130, 255);
  --magenta:       rgb(201, 85, 239);
  --magenta-dk:    rgb(136, 57, 162);
  --red-lt:        rgb(243, 126, 115);
  --red:           rgb(237, 34, 11);
  --red-dk:        rgb(172, 24, 8);
  --yellow-lt:     rgb(255, 217, 49);
  --yellow:        rgb(253, 194, 0);
  --yellow-dk:     rgb(221, 169, 0);
  --green-lt:      rgb(136, 249, 78);
  --green:         rgb(96, 216, 54);
  --green-dk:      rgb(63, 167, 26);
  --blue-lt:       rgb(76, 220, 253);
  --blue:          rgb(0, 161, 255);
  --blue-dk:       rgb(6, 131, 204);
  --orange:        rgb(230, 140, 44);
}

@import url("https://fonts.googleapis.com/css?family=Atkinson+Hyperlegible:ital,wght@0,400;0,700;1,400;1,700|Jost:ital,wght@0,400;0,700;1,400;1,700|PT+Mono|PT+Sans+Caption:wght@400;700|PT+Serif+Caption&display=swap");

//- Our main fonts that can be used on the sheet
%font-vars {
  --basicFont: "Atkinson Hyperlegible", "Open Sans", "Calibri", sans-serif;
  --titleFont: "Jost", "Maven Pro", "Montserrat", "Arial Black", sans-serif;
  --monoFont: "PT Mono", "Liberation Mono", "Courier New", "Courier", monospace;
  --sansFont: "PT Sans Caption", "Liberation Sans", "Arial", "Helvetica", "Tahoma", sans-serif;
  --serifFont: "PT Serif Caption", "Liberation Serif", "Times New Roman", "Mac OS Roman", serif;
}

.serif {
  font-family: var(--serifFont) !important;
}

.mono {
  font-family: var(--monoFont) !important;
}

.title {
  font-family: var(--titleFont) !important;
}

.bigger {
  font-size: 1.2rem !important;
}

.big {
  font-size: 1.1rem !important;
}

.normal {
  font-size: 1.0rem !important;
}

.small {
  font-size: 0.9rem !important;
}

.smaller {
  font-size: 0.8rem !important;
}

.relative {
  position: relative;
}

//- And styling for items that need the roll20 'pictos' fonts
%pictos {
  font-family: 'pictos' !important;
  text-transform: initial !important;
}

%pictos3 {
  font-family: 'pictos three' !important;
  text-transform: initial !important;
}

%pictosCustom {
  font-family: 'pictos custom' !important;
  text-transform: initial !important;
}

//- A placeholder for creating a stackable grid of elements. Particularly for making stacked input labels.
%stackedGrid {
  &.stacked {
    flex-direction: column-reverse;

    &.center>* {
      text-align: center;
    }

    &:not(.center)>* {
      text-align: left;
    }

    >[name] {
      width: 100%;
    }
  }
}

//- Some styling to highlight which input is currently being interacted with.
%inputHighlight {
  border: 1px solid var(--borderColor);
  border-radius: 5px;
  box-sizing: border-box;
  background-color: var(--backColor);
}

//- Placeholder that allows us to easily set a square aspect ratio
%ratio1_1 {
  aspect-ratio: 1/1;
}

//- Placeholder for applying grid display
%grid {
  display: grid;
}

//- Placeholder for applying inline-grid display
%inline-grid {
  display: inline-grid;
}

//- Placeholder for creating circular shapes easily. Combined with %ratio1_1, makes a perfect circle.
%circle {
  border-radius: 50%;
}

//- Creates our basic border for inputs
%base-border {
  border-width: 1px 1px;
  border-style: solid;
  border-radius: 5px;
  border-color: transparent;
  box-sizing: border-box;
}

//- Our basic button styling
%base-button {
  background-color: var(--buttonColor);
  border-radius: 5px;
  box-shadow: 0 2px 4px black;
  border-width: 0;
  backdrop-filter: blur(1px);
  overflow: hidden;
}
//   // transition:{
// 	// 	property:box-shadow,backdrop-filter,background-color;
//   //   duration:200ms;
//   //   timing-function:ease-out;
//   // };

//   &:is(:hover, :focus) {
//     background-color: var(--hoverColor);
//     box-shadow: 0 4px 6px black;
//     backdrop-filter: blur(2px);
//   }

//   &:active {
//     background-color: var(--clickColor);
//     box-shadow: 0 1px 2px black;
//     backdrop-filter: blur(0px);
//   }
// }

// //- Styling for our dice buttons
// %die-button {
//   @extend %base-button;
//   line-height: 14px;
//   /*height to vertically center a $double dicefontd10*/
//   font-size: 2rem;
//   font-weight: normal;
//   font-style: normal;
//   padding: 5px 3px 7px;
// }

//- styling for buttons that have standard text in them
%text-button {
  padding: 5px 7px;
  @extend %base-button;
}

//- Styling for our adaptive text fields
%adaptiveText {
  @extend %grid;
  grid-template-columns: auto;
  grid-template-rows: auto;
  grid-template-areas: "basic";

  >* {
    grid-area: basic;
  }

  >span {
    opacity: 0;
    z-index: -10;
    white-space: pre-wrap;
    @extend %base-border;
    text-transform: initial;
  }

  textarea {
    resize: none;
  }
}

//- placeholder that can be used to apply uppercase letters to an element
%uppercase {
  text-transform: uppercase;
}

%smallcaps {
  font-variant-caps: small-caps;
}

//- Styling for our roll buttons
%roller {
  display: inline-flex;
  align-items: center;
  align-self: start;
  gap: var(--half-gap);

  &:before {
    content: 'l';
    font-family: "dicefontd6";
  }
}

//- Styling to hide elements
%hidden {
  display: none !important; //!important is usually a thing to avoid, but if we're applying this, we want it to be gone no matter what.
}

//- styling for italic words
%emph {
  font-style: italic;
}

%bold {
  font-weight: 700;
}

//- Our basic setup for text on the sheet.
%baseText {
  line-height: normal;
}

//- Basic styling for headers.
%baseHeader {
  @extend %baseText;
  color: var(--fontColor);
  display: block;
  white-space: nowrap;
  margin-top: 0px;
  margin-bottom: 0px;
  font-weight: 700;
}

//- Headers that should pop!
%importantHeader {
  text-transform: uppercase;
  font-weight: 700;
}

//- Headers that should be important, but not eye-catching
%midHeader {
  text-transform: uppercase;
  &:not(input) {
    text-transform: capitalize;
  }
}

.header__image {
  min-width: 191.5px;
  min-height: 88.2px;
}

//- The next several placeholders are for styling our various levels of headers (1-5).
%h1-style {
  @extend %baseHeader;
  @extend %importantHeader;
  font-size: 2rem !important;
  font-family: var(--titleFont);
  text-transform: uppercase;
  background-color: var(--magenta);
  color: var(--invertedFontColor) !important;

  &:not(input) {
    text-align: center;
  }
}

%h1 {
  @extend %h1-style;

  * {
    @extend %h1-style;
  }
}

%h2-style {
  @extend %baseHeader;
  @extend %importantHeader;
  font-size: 1.75rem;
  font-family: var(--serifFont);
  grid-area: header;

  &:not(input) {
    text-align: center;
  }
}

%h2 {
  @extend %h2-style;

  * {
    @extend %h2-style;
  }
}

%h3-style {
  @extend %baseHeader;
  @extend %importantHeader;
  font-size: 1.5rem;
  font-family: var(--titleFont);

  &:not(input) {
    text-align: center;
  }
}

%h3 {
  @extend %h3-style;

  * {
    @extend %h3-style;
  }
}

%h4-style {
  @extend %baseHeader;
  @extend %midHeader;
  font-size: 1.25rem;
  font-family: var(--serifFont);

  &:not(input) {
    text-align: center;
  }
}

%h4 {
  @extend %h4-style;

  * {
    @extend %h4-style;
  }
}

%h5-style {
  @extend %baseHeader;
  @extend %midHeader;
  font-size: 1.1rem;
  font-style: normal;
  font-family: var(--titleFont);

  &:not(input) {
    text-align: center;
  }
}

%h5 {
  @extend %h5-style;

  * {
    @extend %h5-style;
  }
}

%h6-style {
  @extend %baseHeader;
  @extend %midHeader;
  font-size: 1rem;
  font-style: normal;
  font-family: var(--serifFont);

  &:not(input) {
    text-align: center;
  }
}

%h6 {
  @extend %h6-style;

  * {
    @extend %h6-style;
  }
}

//- Placeholder for applying our checked styling to something
%checked {
  background-color: var(--selectedColor);
}

//- Styling for elements that should have a box around them
%boxed {
  border: 1px solid var(--borderColor);
  border-radius: 0;
  box-sizing: border-box;
}

.well-padded {
  padding: 0.5rem !important;
  margin: 0.5rem !important;
}

//- Default styles. This Placeholder gets a little complicated. We're going to define several CSS variables in the first lines that will allow us to easily use the same layout principles across the sheet. Additionally, this placeholder is going to apply several styles to various elements. The reason we do this as a placeholder instead of directly in a class' CSS declaration is so that we can easily apply the same styling to our sheet as a whole and to the rolltemplate (note that many of these class specifications have versions prefixed and unprefixed with `.sheet-`
%universalVariables {
  @extend %font-vars;
  @extend %color-palette;
  --shadowColor1:rgba(0, 0, 0, 0.16);
  --shadowColor2:rgba(0, 0, 0, 0.24);
  --grid-gap: 1rem; //Variable to define our basic gap between layout elements. Followed by several gaps that are mathematically related to it.
  --half-gap: calc(var(--grid-gap) / 2);
  --tiny-gap: calc(var(--half-gap) / 2);
  --big-gap: calc(var(--grid-gap) * 2);
  
  --revealTime: 500ms; //Our basic reveal time for transitions
  --delayTime: 200ms; //Our basic delay time before a transition occurs
  --inputSwap: opacity var(--revealTime) ease var(--delayTime); //Transition properties for swapping the visibility of two elements
  --focusTiming: 500ms ease; //our basic timing for the transition used when an element is focused or hovered on
  --focusTrans: all var(--focusTiming); //The full transition properties for focusing/hovering on an element
  --spanSectionColumn: 1/-1; //How a section should span when it is meant to span large numbers of columns (default span all)
  --displayBorderWidth: 2px; //Our default border width
  
  --borderColor: var(--off-black); //Our basic border color
  --fontColor: var(--black); //Our basic font color
  --invertedFontColor: var(--white); //Our basic inverted font color
  --placeholderFontColor: var(--grey-dk); //Our basic placeholder font color
  --backColor: var(--half-white); //Our basic background color
  --invertedBackColor: var(--half-black); //Our basic inverted background color
  --subHeadBackColor: var(--grey); //Our sub header background color
  --unselectedColor: var(--grey-lt); //Our default font color for items that are currently inactive
  --selectedColor: var(--orange); //Our default font color for items that are currently active
  --disableBackground: var(--grey-lt);
  --buttonColor: var(--magenta);
  --hoverColor: var(--orange);
  --clickColor: var(--magenta-lt);
  --r20white: white;
  --r20black: rgb(31, 31, 31);
}

%defaultStyles {
  $gap: var(--grid-gap);
  gap: $gap;

  button {
    cursor: pointer;
  }

  .uppercase,
  .sheet-uppercase{
    @extend %uppercase;
  }

  .capitalize,
  .sheet-capitalize{
    text-transform:capitalize !important;
  }

  .smallcaps {
    @extend %smallcaps;
  }

  .flex-box,
  .sheet-flex-box {
    display: flex;
    &.col {
      flex-direction: column;
      align-items: center;
    }
    &.row {
      flex-direction: row;
      width: 95%;
      position: relative;
      left: 10px;
    }
  }

  .space-around,
  .sheet-space-around {
    justify-content: space-around;
  }
  .space-between,
  .sheet-space-between {
    justify-content: space-between;
  }
  .center,
  .sheet-center {
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  .right {
    text-align: right;
  }
  .left {
    text-align: left;
  }
  .justify-left,
  .justify-start{
    justify-self: start;
  }
  .justify-right,
  .justify-end{
    justify-self: end;
  }
  .align-start{
    align-self: start;
  }
  .align-end{
    align-self: end;
  }
  
  .grid__8col, .grid__4col, .grid__3col, .grid__2col {
    display: grid;
    width: auto;
    gap: var(--half-gap);
    &.grid__8col {
      grid-template-columns: auto auto auto auto auto auto auto auto;
    }
    &.grid__4col {
      grid-template-columns: auto auto auto auto;
    }
    &.grid__3col {
      grid-template-columns: auto auto auto;
    }
    &.grid__2col {
      grid-template-columns: auto auto;
    }
  }

  .no-gap {
    gap: 0px !important;
  }

  .half-gap {
    gap: var(--half-gap);
  }

  textarea {
    font-family: var(--basicFont);
    font-weight: normal !important;
    resize: vertical;
    line-height: 1.25em;
    min-height: 2.5rem;
    white-space: pre-wrap;
    text-overflow: ellipsis;

    &.fixed {
      resize: none;
      overflow: auto;
    }

    &.textarea-1 { height: 1.25em; }
    &.textarea-2 { height: 2.5em; }
    &.textarea-3 { height: 3.75em; }
    &.textarea-4 { height: 4em; }
    &.textarea-5 { height: 6.25em; }
    &.textarea-6 { height: 7.5em; }
    &.textarea-8 { height: 10em; }

    &.no-style {
      border: none;
      background-color: transparent;
    }

    &.ambition {
      width: 90% !important;
      font-size: 1.1rem;
      // font-weight: bold !important;
    }
  }

  .span-3 {
    grid-column: span 3;
  }

  .span-2,
  .sheet-span-2 {
    grid-column: span 2;
  }

  .span-all,
  .sheet-span-all {
    grid-column: 1/-1;
  }

  select,
  .pseudo-select span,
  .sheet-pseudo-select span,
  textarea,
  input:not(:is([type='radio'], [type='checkbox'])),
  .uneditable-input {
    padding: 2px;
    font-size: 1rem;
    cursor: pointer;
  }

  input:is([type="text"], [type="number"]),
  textarea {
    cursor: auto;
  }

  select,
  .pseudo-select span,
  .sheet-pseudo-select span,
  input:not(:where([type='checkbox'], [type='radio'])),
  .uneditable-input,
  textarea {
    @extend %base-border;
  }

  select,
  .sheet-pseudo-select span,
  .pseudo-select span {
    -webkit-apperance: none;
    appearance: none;
    text-transform: capitalize;
    overflow: hidden !important;
    white-space: nowrap;
    text-overflow: ellipsis;
    text-align: center;
  }

  input {
    width: auto;

    &:placeholder {
      color: var(--placeholderFontColor);
    }

    &.plus-control:not([value*="-"])+span:before {
      content: '+';
    }
  }

  span,
  input,
  textarea {
    font-size: 1rem;
    @extend %baseText;
  }

  span[name],
  input,
  textarea,
  select {
    font-family: var(--basicFont);
    --fontWght: 700;
    font-weight: var(--fontWght);
    font-variation-settings: "wght"var(--fontWght);
    background-color: var(--backColor);
    color: var(--fontColor);
  }

  .sheet-hidden,
  .hidden,
  *[hidden] {
    @extend %hidden;
  }

  .emph, .sheet-emph,
  .sheet-italics,
  .italics {
    @extend %emph;
  }

  .bold, .sheet-bold {
    @extend %bold;
  }

  h1, .h1-style-input,
  *[aria-level='1'] {
    @extend %h1;
    &::placeholder {
      text-shadow: 0 0 2px white, 0 0 2px white;
    }
  }

  .h1-style-input {
    text-align: center;
    border-radius: 0;
    border: none;
    height: 46px;
    min-width: 200px;
    &:not(.color-receiver) {
      background-color: var(--magenta) !important;
    }
  }

  h2,
  *[aria-level='2'] {
    @extend %h2;
  }

  h3, .h3-style-input,
  *[aria-level='3'] {
    @extend %h3;
    text-overflow: ellipsis;
  }

  h4,
  *[aria-level='4'] {
    @extend %h4;
  }

  h5,
  *[aria-level='5'] {
    @extend %h5;
  }

  h6,
  *[aria-level='6'] {
    @extend %h6;
  }

  input{
    &:where([type='checkbox'],[type='radio']){
      align-self: center;
      border: 1px solid var(--borderColor);
      cursor: pointer;
      width: 1rem;
      display:inline-block;
      @extend %ratio1_1;
      &:checked{
        @extend %checked;
      }
    }
    &[type='radio']{
      appearance: radio;
    }
    &[type='number']{
      width: 3rem;
      -moz-appearance: textfield !important;
      text-align: center;
      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button{
        -webkit-appearance: none;
        margin: 0;
      }
    }
  }

  .sheet-number,
  .number{
    width:2rem;
    box-sizing:border-box;
  }

  section,header,footer{
    align-self:start;
    display:grid;
    gap:var(--half-gap);
  }
  // .nav-display{
  //   &:not(.active){
  //     display:none !important;
  //   }
  // }
  // .inactive{
  //   display:none !important;
  // }

  .sheet-pictos,
  .pictos {
    @extend %pictos;
  }

  .pictos3,
  .sheet-pictos3 {
    @extend %pictos3;
  }

  .pictoscustom,
  .sheet-pictoscustom {
    @extend %pictosCustom;
  }

  .pseudo-button{
    cursor: pointer;
    &:hover,
    &:focus-within{
      > .pseudo-button__span{
        background-color:var(--selectedColor);
        color:var(--backColor);
      }
    }
  }
  .pseudo-button__span{
    border-radius: 5px;
    border: 1px solid var(--borderColor);
    text-align: center;
    padding: 0 5px;
    transition:{
      property:background-color,color;
      duration:var(--revealTime);
    }
  }
  .pseudo-button__input{
    display:none;
    &:checked + span{
      background-color:var(--selectedColor);
      color:var(--backColor);
    }
  }

  .input-label {
    display: inline-flex;
    gap: var(--half-gap);
    align-items: center;
    @extend %stackedGrid;

    &:not(.stacked) {
      >[name]:not([type="number"], [type="checkbox"], [type='radio']) {
        width: 0;
        flex: 1 1 0;
      }

      >:not([name]) {
        flex: 0 0 auto;
      }

      &.large>[name] {
        @extend h2;
      }
    }
  }

  .input-label--dual {
    grid-template-columns: 1fr auto 1fr;
    grid-template-areas: 'over 	over 	over''under 	under 	under';

    >span:last-of-type {
      grid-column: 1 / -1;
    }

    >input {
      width: 100%;
    }

    >.slash {
      line-height: 0rem;
      font-weight: normal;
    }
  }

  .headed-textarea {
    @extend %grid;
    grid-template-rows: auto 1fr;
    grid-template-columns: auto;

    h5 {
      justify-self: start;
    }
  }

  .boxed,
  .sheet-boxed {
    @extend %boxed;

    &.thick-left {
      border-left-width: 5px;
    }

    &.thick-bottom {
      border-bottom-width: 5px;
    }

    &.thick-right {
      border-right-width: 5px;
    }

    &.thick-top {
      border-top-width: 5px;
    }
  }

  .underlined,
  .sheet-underlined {
    border-radius: 0;
    border-bottom: 1px solid var(--borderColor);
    transition: var(--focusTrans);
  }

  :is(.underlined, .boxed) {
    &:not([readonly]):is(:hover, :focus, :focus-within) {
      @extend %inputHighlight;
    }

    &:not([readonly]):is(:focus, :focus-within) {
      background-color: var(--invertedFontColor);
      transition: var(--focusTrans);
    }
  }

  .ratio1-1,
  .sheet-ratio1-1 {
    @extend %ratio1_1;
  }

  .short-text,
  .sheet-short-text {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
  }

  .roll-container {
    @extend %grid;
    align-self: center;
    opacity: 0;
    grid-row: 1 / 2;
  }

  .hide-note {
    position: relative;
    cursor: help;
  }
  .repitem, .hide-note {
    >input:not(:where([type='checkbox'],[type='number'],[type='radio'])) {
      width: 100%;
    }

    .headed-textarea {
      grid-column: 1/-1;
    }

    .collapse {
      -webkit-appearance: none;
      opacity: 0;
      position: absolute;
      right: 2px;
      top: 2px;
      border: none;
      color: var(--selectedColor);
      text-transform: none;

      height: 18px;
      width: 18px;
      
      -ms-transform: scale(1.2); /* IE 9 */
      -webkit-transform: scale(1.2); /* Chrome, Safari, Opera */
      transform: scale(1.2);
      
      -webkit-font-smoothing: antialiased;
      -moz-border-radius: 50%;
      -webkit-border-radius: 50%;
      border-radius: 50%;

      &:after {
        content: 'i';
        font-family: "Pictos";
        position: relative;
        left: 2px;
        bottom: 2px;
        text-shadow: 1px 1px 3px white;
      }

      &:checked {
        background-color: transparent;
        color: var(--unselectedColor);

        ~.expanded {
          display: none;
        }

        ~.expanded--empty:is(:not([value]), [value=''])+* {
          display: none
        }
      }

      &:hover {
        color: var(--selectedColor);
      }
    }

    &:hover {

      .collapse,
      .roll-container {
        opacity: 1;
      }
    }
  }

  .repcontainer.editmode {
    .collapse {
      display: none;
    }
  }

  .repcontainer {
    display: grid;
    gap: var(--half-gap);
  }

  .repeating-container {
    &:is(:hover, :focus-within, :focus) .repcontrol-button {
      opacity: 1;
    }
  }

  .repcontrol-button {
    @extend %text-button;
    grid-area: header;
    align-self: center;
    text-transform: none;
    opacity: 0;
    transition: opacity var(--revealTime);

    ~.repcontrol {
      display: none;
    }
  }

  .repcontrol-button--add,
  .repcontrol-button__add {
    justify-self: start;
    background-color: var(--invertedBackColor) !important;
    &:before {
      font-family: pictos;
      content: '&';
    }
  }

  .repcontrol-button--edit,
  .repcontrol-button__edit {
    justify-self: end;
    background-color: var(--invertedBackColor) !important;
    &:before {
      font-family: pictos;
      content: 'p';
    }
  }

  .sheet-box,
  .box {
    border-radius: 0;
    width: 10px;
    height: 10px;
  }

  .dot {
    width: auto;
    height: auto;
  }

  p {
    font-size: 1.0rem;
    width: 96%;
    color: var(--invertedBackColor);
    &.bullet::before {
      font-family: pictos;
      content: ']';
      position: relative;
      right: 5px;
    }
    &.indent {
      position: relative;
      left: 20px;
    }
    &.colon {
      font-family: var(--titleFont);
      font-size: 1.1rem;
      font-weight: bold;
      position: relative;
      top: 3px;
      &::after{content: '\003A';} /* CSS colon : entity \003A : html &colon; */
    }
    &.macro {
      position: relative;
      bottom: -8px;
      left: 5px;
    }
  }


  .auto-expand {
    overflow: hidden; /* hides overflow that is caused by the span */
    position: relative; /* Allows the input's absolute positioning to be relative to this parent div */
    min-width: 100px; /* Whatever feels good to you, prevents a new span from collapsing to 0. */
    max-height: 200px;
    width: fit-content;
    // height: fit-content; /* Will fit the width to the contents without going outside itself or collapsing smaller than its content, though we will be using min-width in the case where there's no content. */
    height: 25% !important; /* Prevent the span from defining the height of the input container which can't be multiline */
  }
  .auto-expand span {
    visibility: hidden;
    height: 0px;
    position: relative;
  }
  .auto-expand input {
    position: absolute; /* removes the input from the DOM flow, allowing the span to exist in the same space */
    width: 100%; /* Inputs match the width of the parent element as defined by the spans */
    font-size: 1em;
  }
}